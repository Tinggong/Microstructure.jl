var documenterSearchIndex = {"docs":
[{"location":"manual/models/#Microstructure-Models","page":"Microstructure Models","title":"Microstructure Models","text":"","category":"section"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"This page introduces several biophysical models. A biophysical model includes several tissue compartments and other parameters including compartment fractions and signals.","category":"page"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"BiophysicalModel","category":"page"},{"location":"manual/models/#Microstructure.BiophysicalModel","page":"Microstructure Models","title":"Microstructure.BiophysicalModel","text":"All models in this page belong to the BiophysicalModel Type. You can also build your models with desired combinations of compartments using a similar syntax.  In each model, all compartmental parameters can be considered \"free parameters\" and sampled using MCMC.  This is designed to offer maximum flexibility in adjusting model assumptions, but it doesn't guarantee reliable estimation of all parameters.  It's common that we need to fix or link some tissue parameters based on our data measurement protocols and our tissue parameters of interest. Parameter fixing and linking can be achieved by settings in MCMC sampler in the estimator module.\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#dMRI-models","page":"Microstructure Models","title":"dMRI models","text":"","category":"section"},{"location":"manual/models/#WM-models","page":"Microstructure Models","title":"WM models","text":"","category":"section"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"ExCaliber","category":"page"},{"location":"manual/models/#Microstructure.ExCaliber","page":"Microstructure Models","title":"Microstructure.ExCaliber","text":"ExCaliber(\n    axon::Cylinder,\n    extra::Zeppelin,\n    dot::Iso,\n    fracs::Vector{Float64}\n    )\n\nExCaliber is a multi-compartment model for estimating axon diameter. It can be used for ex vivo imaging when the diffusivity in the ISO compartment is set to 0 (dot compatment), and for in vivo imaging if the diffusivity of the ISO compartment is set to free water in tissue (CSF compartment).  \n\nReference\n\nFan, Q., Nummenmaa, A., Witzel, T., Ohringer, N., Tian, Q., Setsompop, K., ... & Huang, S. Y. (2020). Axon diameter index estimation independent of fiber orientation distribution using high-gradient diffusion MRI. Neuroimage, 222, 117197.\n\nGong, T., Maffei, C., Dann, E., Lee, H.-H., Lee Hansol, Huang, S., Suzanne, H., Yendiki, A., 2024. Imaging the relationship of axon diameter and myelination in macaque and human brain, in: ISMRM.\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#GM-models","page":"Microstructure Models","title":"GM models","text":"","category":"section"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"SANDI","category":"page"},{"location":"manual/models/#Microstructure.SANDI","page":"Microstructure Models","title":"Microstructure.SANDI","text":"SANDI(\n    soma::Sphere,\n    neurite::Stick,\n    extra::Iso,\n    fracs::Vector{Float64}\n    )\n\nThe soma and neurite density imaging (SANDI) model uses a sphere compartment to model the cell soma,  a stick compartment to model the neurite and an isotropic diffusion compartment for the extra-cellular space;  It includes all the tissue parameters in each compartment and a fracs vector representing the fraction of  intra-soma signal and intra-neurite signal (the extra-cellular signal fraction is 1-sum(fracs)). For SANDI model, ignore the field of t2 in all compartments and set them to 0.\n\nReference\n\nPalombo, M., Ianus, A., Guerreri, M., Nunes, D., Alexander, D.C., Shemesh, N., Zhang, H., 2020. SANDI: A compartment-based model for non-invasive apparent soma and neurite imaging by diffusion MRI. Neuroimage 215. https://doi.org/10.1016/j.neuroimage.2020.116835\n\n\n\n\n\n","category":"type"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"SANDIdot","category":"page"},{"location":"manual/models/#Microstructure.SANDIdot","page":"Microstructure Models","title":"Microstructure.SANDIdot","text":"SANDIdot(\n    soma::Sphere \n    neurite::Stick\n    extra::Iso \n    dot::Iso\n    fracs::Vector{Float64} \n)\n\nSANDIdot model includes additionally a dot compartment for SANDI model; the dot compartment is considered as immobile water and is more commonly seen in ex vivo imaging. For SANDIdot model, ignore the field of t2 in all compartments and set them to 0. The fraction vector represents fractions of the soma,  neurite and dot with the fraction of extra being 1-sum(fracs).\n\nReference\n\nAlexander, D.C., Hubbard, P.L., Hall, M.G., Moore, E.A., Ptito, M., Parker, G.J.M., Dyrby, T.B., 2010. Orientationally invariant indices of axon diameter and density from diffusion MRI. Neuroimage 52, 1374–1389. https://doi.org/10.1016/j.neuroimage.2010.05.043\n\nPanagiotaki, E., Schneider, T., Siow, B., Hall, M.G., Lythgoe, M.F., Alexander, D.C., 2012. Compartment models of the diffusion MR signal in brain white matter: A taxonomy and comparison. Neuroimage 59, 2241–2254. \n\nPalombo, M., Ianus, A., Guerreri, M., Nunes, D., Alexander, D.C., Shemesh, N., Zhang, H., 2020. SANDI: A compartment-based model for non-invasive apparent soma and neurite imaging by diffusion MRI. Neuroimage 215. https://doi.org/10.1016/j.neuroimage.2020.116835\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#Combined-diffusion-relaxometry-models","page":"Microstructure Models","title":"Combined diffusion-relaxometry models","text":"","category":"section"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"MTE_SMT","category":"page"},{"location":"manual/models/#Microstructure.MTE_SMT","page":"Microstructure Models","title":"Microstructure.MTE_SMT","text":"MTE_SMT(\n    axon::Stick = Stick()\n    extra::Zeppelin = Zeppelin()\n    fracs::Float64 = 0.5\n    )\n\nThis is a model using multi-TE spherical mean technique for lower b-value in vivo imaging. Compartmental T2s are considered.  There is not a specific reference for this model yet, but you can refer to previous work related to this topic:\n\nKaden, E., Kruggel, F., Alexander, D.C., 2016. Quantitative mapping of the per-axon diffusion coefficients in brain white matter. Magn Reson Med 75, 1752–1763. https://doi.org/10.1002/MRM.25734\n\nKaden, E., Kelm, N. D., Carson, R. P., Does, M. D., & Alexander, D. C. (2016). Multi-compartment microscopic diffusion imaging. NeuroImage, 139, 346-359.\n\nVeraart, J., Novikov, D.S., Fieremans, E., 2017. TE dependent Diffusion Imaging (TEdDI) distinguishes between compartmental T 2 relaxation times. https://doi.org/10.1016/j.neuroimage.2017.09.030\n\nGong, T., Tong, Q., He, H., Sun, Y., Zhong, J., Zhang, H., 2020. MTE-NODDI: Multi-TE NODDI for disentangling non-T2-weighted signal fractions from compartment-specific T2 relaxation times. Neuroimage 217. https://doi.org/10.1016/j.neuroimage.2020.116906\n\n\n\n\n\n","category":"type"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"MTE_SANDI","category":"page"},{"location":"manual/models/#Microstructure.MTE_SANDI","page":"Microstructure Models","title":"Microstructure.MTE_SANDI","text":"MTE_SANDI(\n    soma::Sphere \n    neurite::Stick\n    extra::Iso \n    fracs::Vector{Float64} \n    S0norm::Float64\n    )\n\nFor Multi-echo-SANDI (MTE-SANDI) model, consider the t2 values in all compartments,  and the fractions estimated will be non-T2-weighted compartment fractions in comparison to the model mentioned above.  S0norm is the relaxation-weighting free signal from all compartments S(b=0,t=0) normalised by S(b=0,t=TEmin).\n\nReference\n\nGong, T., Tax, C.M., Mancini, M., Jones, D.K., Zhang, H., Palombo, M., 2023. Multi-TE SANDI: Quantifying compartmental T2 relaxation times in the grey matter. Toronto.\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#Prediction-of-MRI-signals","page":"Microstructure Models","title":"Prediction of MRI signals","text":"","category":"section"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"This function implements different methods for different BiophysicalModel types.","category":"page"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"model_signals","category":"page"},{"location":"manual/models/#Microstructure.model_signals","page":"Microstructure Models","title":"Microstructure.model_signals","text":"model_signals(model::BiophysicalModel,prot::Protocol[,links])\n\nReture predicted model signals from BiophysicalModel model and imaging protocol 'prot'.     links is a optional argument that specify parameter links in the model.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/1_build_models/#How-to-build-a-microstructure-model","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"","category":"section"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"This page introduces some simple steps for you to observe how tissue microstructrure parameters affect dMRI spherical mean signals using some biphysical models. ","category":"page"},{"location":"tutorials/1_build_models/#1.-diffusion-MRI-model","page":"How to build a microstructure model","title":"1. diffusion MRI model","text":"","category":"section"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Load the module","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"using Microstructure","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Specify the acquisition parameters and make a protocol. In real case, you can read a protocol from your acquisition text files","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"bval = [0, 1000, 2500, 5000, 7500, 11100, 18100, 25000, 43000].*1.0e6\nn = length(bval)\ntecho = 40.0.*ones(n,).*1e-3\ntdelta = 15.192.*ones(n,).*1e-3\ntsmalldel = 11.0.*ones(n,).*1e-3\nprot = Protocol(bval,techo,tdelta,tsmalldel)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Specify a model containing all the tissue parameters. Here, the example ExCaliber is a model for estimating axon diameter in ex vivo tissue using the spherical mean technique","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"estimates = ExCaliber()","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can check how the tissue is modelled by printing the model. It will give you all the tissue compartments","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"print_model(estimates)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can check the values in the tissue model by using @show macro. This will show the default values if you didn't specify parameters when declare a model","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"@show estimates","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can specify tissue parameters when declearing a model; fields/subfiedls that are not specified will take the default values","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"estimates = ExCaliber( axon = Cylinder(da = 4.0e-6, dpara = 0.7e-9))","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can change the fields/subfields of a decleared model struct by using update! funciton.","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"a. update a field/subfields","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"undate!(estimates, \"axon.da\" => 5.0e-6)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"It's common that we need to link certain tissue parameters in some models as they may not be distinguishable under the experimental condition.","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"b. update a field/subfield using parameter links.","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"update!(estimates,\"axon.d0\" => \"axon.dpara\")","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"c. update multiple parameters","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"update!(estimates,(\"axon.da\" => 5.0e-6, \"axon.dpara\" => 0.5e-9, \"axon.d0\" => \"axon.dpara\", \"extra.dpara\" => \"axon.dpara\"))","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Now we can use the model and protocol to generate some mri signals","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"signals = model_signals(estimates,prot)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"We can add some noise to the signals to make them look like real measurements","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"using Random, Distributions\n\nsigma = 0.01 # SNR=100 at S(b=0,t=TEmin) (b=0 of minimal TE)\nnoise = Normal(0,sigma)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Add some Gaussian noise","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"meas = signals .+ rand(noise,size(signals))","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"or Rician noise","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"meas_rician = sqrt.((signals .+ rand(noise,size(signals))).^2.0 .+ rand(noise,size(signals)).^2.0)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can check the predict signals and simulated measurements by ploting them","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"using Plots\nplot(prot.bval, signals, label=\"predicted signals\", lc=:black, lw=2)\nscatter!(prot.bval, meas, label=\"noisy measurements\", mc=:red, ms=2, ma=0.5)\nxlabel!(\"b-values [s/m^2]\")","category":"page"},{"location":"tutorials/1_build_models/#2.-Combined-Diffusion-relaxometry-model","page":"How to build a microstructure model","title":"2. Combined Diffusion-relaxometry model","text":"","category":"section"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Now let's look at a diffusion-relaxometry model MTE-SANDI. Similarly, declear a model object and check the values","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"model = MTE_SANDI()\nprint_model(model)\n@show model","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"MTE_SANDI requires data acquired at multiple echo times to solve the inverse problem and we will define a different protocol for it.","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Make a multi-TE protocol","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"nTE = 4\nnb = 9\nbval = repeat([0, 1000, 2500, 5000, 7500, 11100, 18100, 25000, 43000].*1.0e6, outer=nTE)\ntecho = repeat([32, 45, 60, 78].*1e-3, inner=9)\ntdelta = 15.192.*ones(nTE*nb,).*1e-3\ntsmalldel = 11.0.*ones(nTE*nb,).*1e-3\nprot = Protocol(bval,techo,tdelta,tsmalldel)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Let's see how multi-TE signals look like","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"signals = model_signals(model, prot)\nmeas = signals .+ rand(noise,size(signals))\n\nplot(signals, label=\"predicted signals\", lc=:black, lw=2)\nscatter!(meas, label=\"noisy measurements\", mc=:red, ms=2, ma=0.5)","category":"page"},{"location":"tutorials/5_model_selection/#Which-model-to-use","page":"Which model to use","title":"Which model to use","text":"","category":"section"},{"location":"tutorials/5_model_selection/","page":"Which model to use","title":"Which model to use","text":"Constructing...","category":"page"},{"location":"manual/dMRI/#I/O-functions","page":"I/O functions","title":"I/O functions","text":"","category":"section"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"This page introduces functions for reading dMRI data and protocols for microstructure imaging.","category":"page"},{"location":"manual/dMRI/#Read-from-DWI-data-and-get-spherical-mean-signals-and-imaging-protocols","page":"I/O functions","title":"Read from DWI data and get spherical mean signals & imaging protocols","text":"","category":"section"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"spherical_mean","category":"page"},{"location":"manual/dMRI/#Microstructure.spherical_mean","page":"I/O functions","title":"Microstructure.spherical_mean","text":"spherical_mean(\n    image_file::String, \n    save::Bool=true, \n    acq_files::String...\n)\n\nPerform direction average on input DWI images image_file and return an MRI object with normalized spherical mean signal and associated imaging protocol. image_file is the full path of the DWI image file; save indicates whether to save the smt and normalized smt image volumes and protocol. If saving the files, nifti and text file (.btable) will be saved in the same path as the input data. Finall, variable number of acq_files are text files that tell you acquistion parameters of each DWI in the image_file.  Accepted file extensions are .bvals/.bvecs/.techo/.tdelta/.tsmalldel for b-values, gradient directions, echo times, diffusion gradient seperation and duration times.\n\nBesides .bvals/.bvecs for conventional modelling, .tdelta/.tsmalldel files are needed for any models that estimate size, e.g. axon diameter, soma radius. .techo is needed if your data is collected with multiple echo-time and you want to do combined-diffusion relaxometry modelling.  The format of a .tdelta/.tsmalldel/.techo file is similar to a .bvals file (a vector with the length equal to the number of DWI volumes).  Unit in the .tdelta/.tsmalldel/.techo file is ms. \n\n\n\n\n\n","category":"function"},{"location":"manual/dMRI/#The-dMRI-and-Protocol-type","page":"I/O functions","title":"The dMRI and Protocol type","text":"","category":"section"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"dMRI","category":"page"},{"location":"manual/dMRI/#Microstructure.dMRI","page":"I/O functions","title":"Microstructure.dMRI","text":"dMRI(nifti::MRI, \ntdelta::Vector{Float64}, \ndsmalldel::Vector{Float64}, \ntecho::Vector{Float64}, \nsmt::Bool)\n\nReturn a dMRI Type object with MRI object nifti, and additional volume-wise  experimental settings tdelta, tsmalldel, techo, and smt for identifing smt signals. \n\n\n\n\n\n","category":"type"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"Protocol","category":"page"},{"location":"manual/dMRI/#Microstructure.Protocol","page":"I/O functions","title":"Microstructure.Protocol","text":"Protocol(\nbval::Vector{Float64}\ntecho::Vector{Float64}\ntdelta::Vector{Float64}\ntsmalldel::Vector{Float64}\ngvec::Vector{Float64}\nbvec::Matrix{Float64}\n)\n\nReturn a Protocol Type object to hold parameters in acquisition protocol relavent for modelling  including b-values, tcho times, diffusion gradient seperation, duration, strengh and direction.  Unit convention: most text files use s/mm^2 for b-values and ms for time while they are converted to SI unit in the Protocol. b-values (s/m^2); time (s); size (m); G (T/m) \n\nProtocol(\n    filename::String\n)\n\nReturn a Protocol Type object from a b-table file generated from spherical_mean function.\n\nProtocol(\n    bval::Vector{Float64},\n    techo::Vector{Float64},\n    tdelta::Vector{Float64},\n    tsmalldel::Vector{Float64},\n)\n\nCalculate gvec and return a Ptotocol Type object from provided parameters.\n\nProtocol(\n    dmri::dMRI\n)\n\nReturn a Protocol Type object from a dMRI object.\n\n\n\n\n\n","category":"type"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"Write image and save protocol","category":"page"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"dmri_write","category":"page"},{"location":"manual/dMRI/#Microstructure.dmri_write","page":"I/O functions","title":"Microstructure.dmri_write","text":"dmri_write(dmri::dMRI, datapath::String, filename::String)\n\nWrite the nifti volume in a dMRI object to nifti file and associated protocol as b-table text files in the given datapath and filename.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/2_quality_of_fit/#How-to-check-quality-of-fitting-and-mcmc-samples","page":"How to check quality of fitting and mcmc samples","title":"How to check quality of fitting and mcmc samples","text":"","category":"section"},{"location":"tutorials/2_quality_of_fit/","page":"How to check quality of fitting and mcmc samples","title":"How to check quality of fitting and mcmc samples","text":"Constructing...","category":"page"},{"location":"guide/#Developer-guide","page":"Developer guide","title":"Developer guide","text":"","category":"section"},{"location":"manual/estimators/#Estimators","page":"Estimators","title":"Estimators","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"This page introduces two types of estimators in Microstructure.jl for estimating parameters and quantifying uncertainties: the Markov Chain Monte Carlo (MCMC) sampling method and Monte Carlo dropout using neural networks. These two types of estimators are flexibly parametrized, allowing you to specify sampling options for MCMC and training options for neural networks. ","category":"page"},{"location":"manual/estimators/#MCMC","page":"Estimators","title":"MCMC","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"MCMC methods aim to generate independent samples from the posterior distributions of tissue parameters given certain MRI measurements. You will need to tune the sampler parameters for a specific biophysical model.","category":"page"},{"location":"manual/estimators/#Define-a-sampler-for-your-model","page":"Estimators","title":"Define a sampler for your model","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"Sampler","category":"page"},{"location":"manual/estimators/#Microstructure.Sampler","page":"Estimators","title":"Microstructure.Sampler","text":"Sampler(\n    params::Tuple{Vararg{String}},\n    prior_range::Tuple{Vararg{Tuple{Float64, Float64}}}, \n    proposal::Tuple{Vararg{<:Any}},\n    paralinks::Tuple{Vararg{Pair{String}}}, \n    nsamples::Int64 \n    burnin::Int64\n    thinning::Int64 \n)\n\nReturn a Sampler Type object for a biophysical model.\n\nExamples\n\njulia>Sampler(\n    params = (\"axon.da\",\"axon.dpara\",\"extra.dperp_frac\",\"fracs\"),\n    prior_range = ((1.0e-7,1.0e-5),(0.01e-9,0.9e-9),(0.0, 1.0),(0.0,1.0)),\n    proposal = (Normal(0,0.25e-6), Normal(0,0.025e-9), Normal(0,0.05), MvNormal([0.0025 0 0;0 0.0001 0; 0 0 0.0001])),\n    paralinks = (\"axon.d0\" => \"axon.dpara\", \"extra.dpara\" => \"axon.dpara\"),\n    nsamples = 70000,\n    burnin = 20000\n)\nSampler((\"axon.da\", \"axon.dpara\", \"extra.dperp_frac\", \"fracs\"), ((1.0e-7, 1.0e-5), (1.0e-11, 9.0e-10), (0.0, 1.0), (0.0, 1.0)), (Normal{Float64}(μ=0.0, σ=2.5e-7), Normal{Float64}(μ=0.0, σ=2.5e-11), Normal{Float64}(μ=0.0, σ=0.05), ZeroMeanFullNormal(\ndim: 3\nμ: Zeros(3)\nΣ: [0.0025 0.0 0.0; 0.0 0.0001 0.0; 0.0 0.0 0.0001]\n)\n), (\"axon.d0\" => \"axon.dpara\", \"extra.dpara\" => \"axon.dpara\"), 70000, 20000, 1)\n\n\n\n\n\n","category":"type"},{"location":"manual/estimators/#Define-a-noise-model","page":"Estimators","title":"Define a noise model","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"Noisemodel","category":"page"},{"location":"manual/estimators/#Microstructure.Noisemodel","page":"Estimators","title":"Microstructure.Noisemodel","text":"Noisemodel(logpdf::Function, \nsigma_start::Float64, \nsigma_range::Tuple{Float64,Float64}, \nproposal::Distribution)\n\nReturn a Noisemodel object with logpdf Function to calculate log likelihood of measurements (set this between logp_gauss and logp_rician),  sigma_start as the starting value of noise level, sigma_range as prior range and proposal distribution for MCMC sampling.\n\nExamples\n\njulia> Noisemodel()\nNoisemodel(Microstructure.logp_gauss, 0.01, (0.005, 0.1), Distributions.Normal{Float64}(μ=0.0, σ=0.005))\n\njulia> Noisemodel(logpdf = logp_rician, sigma_start = 0.02, proposal = Normal(0,0.001))\nNoisemodel(Microstructure.logp_rician, 0.02, (0.005, 0.1), Normal{Float64}(μ=0.0, σ=0.001))\n\n\n\n\n\n","category":"type"},{"location":"manual/estimators/#Run-MCMC-on-your-model-and-data","page":"Estimators","title":"Run MCMC on your model and data","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"mcmc!","category":"page"},{"location":"manual/estimators/#Microstructure.mcmc!","page":"Estimators","title":"Microstructure.mcmc!","text":"Method 1 generates pertubations within function, creates and returns a dict chain, and modify final model estimates in place. This method is useful in checking a few voxels, e.g. for quality of fitting, chain dignostics and optimizing sampler for models. \n\nmcmc!(\n    estimates::BiophysicalModel,\n    meas::Vector{Float64},\n    protocol::Protocol,\n    sampler::Sampler,\n    noise::Noisemodel = Noisemodel(),\n    rng::Int64 = 1\n)\n\njulia> chain = mcmc!(estimates, measurements, protocol, sampler, noise_model, rng)\n\nMethod 2 takes chain and pertubations as input, mutating chain in place which can be used to calculate finial estimates and uncertainties.  This method is used for processing larger dataset, e.g. for whole-barin/slices.  This method is used together with multi-threads processing that pre-allocate spaces for caching chains, avoiding creating them for each voxel.  This method also reuses pertubations for faster computation speed; we usually use very large numbers of pertubations (e.g. ~10^4) to densely sample the proposal distributions. \n\nmcmc!(\n    chain::Vector{Any},\n    estimates::BiophysicalModel,\n    meas::Vector{Float64},\n    protocol::Protocol,\n    sampler::Sampler,\n    pertubations::Vector{Vector{Any}},\n    noise::Noisemodel = Noisemodel()\n)\n\njulia> mcmc!(chain, estimates, meas, protocol, sampler, pertubations, noise_model))\n\nReferences\n\nFor using MCMC in microsturcture imaging, here are some recommended references:\n\nBehrens, T.E.J., Woolrich, M.W., Jenkinson, M., Johansen-Berg, H., Nunes, R.G., Clare, S., Matthews, P.M., Brady, J.M., Smith, S.M., 2003. Characterization and Propagation of Uncertainty in Diffusion-Weighted MR Imaging. Magn Reson Med 50, 1077–1088. https://doi.org/10.1002/MRM.10609\n\nAlexander, D.C., 2008. A General Framework for Experiment Design in Diffusion MRI and Its Application in Measuring Direct Tissue-Microstructure Features. Magn Reson Med 60, 439–448. https://doi.org/10.1002/mrm.21646\n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"Function mcmc! runs on single thread and suitable for testing sampler parameters and inspecting chains for small dataset. After optimizing sampler parameters, if you are processing datasets with many voxels, use the threading function for multi-threads processing. Refer to multi-threads page for more details.","category":"page"},{"location":"manual/estimators/#Neural-Networks","page":"Estimators","title":"Neural Networks","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"This module currently includes simple multi-layer perceptrons and training data generation function, which allows supervised training of the MLPs on synthesised data with given training parameter distributions. ","category":"page"},{"location":"manual/estimators/#Specify-a-network-model-for-your-task","page":"Estimators","title":"Specify a network model for your task","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"NetworkArg","category":"page"},{"location":"manual/estimators/#Microstructure.NetworkArg","page":"Estimators","title":"Microstructure.NetworkArg","text":"NetworkArg(\n    model::BiophysicalModel\n    protocol::Protocol\n    params::Tuple{Vararg{String}}\n    prior_range::Tuple{Vararg{Tuple{Float64,Float64}}} # range for priors \n    prior_dist::Tuple{Vararg{<:Any}}\n    paralinks::Tuple{Vararg{Pair{String,<:String}}} = ()\n    noise_type::String = \"Gaussian\" # \"Rician\"    \n    sigma_range::Tuple{Float64, Float64}\n    sigma_dist::Distribution\n    nsamples::Int64\n    nin::Int64\n    nout::Int64\n    hidden_layers::Tuple{Vararg{Int64}}\n    dropoutp::Union{<:AbstractFloat, Tuple{Vararg{<:AbstractFloat}}}\n    actf::Function\n)\n\nReturn a NetworkArg object with necessary parameters to construct a neural network model  and generate training samples for specifc biophysical model. A test network architecture and training samples can be automaticlly determined from the modelling task by using function\n\nNetworkArg(model, protocol, params, prior_range, prior_dist, paralinks, noisetype, sigma_range, sigma_dist)\n\n\n\n\n\n","category":"type"},{"location":"manual/estimators/#Specify-training-parameters","page":"Estimators","title":"Specify training parameters","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"TrainingArg","category":"page"},{"location":"manual/estimators/#Microstructure.TrainingArg","page":"Estimators","title":"Microstructure.TrainingArg","text":"TrainingArg(\n    batchsize::Int64 \n    lossf::Function\n    lr::Float64\n    epoch::Int64\n    tv_split::Float64\n    patience::Tuple{Int64,Int64} \n    device::Function\n)\n\nReturn TrainingArg Type object with fields related to how network will be trained. batch size; loss function; learning rate; number of epoches; validation/training data split; patience for train loss plateau, patience for validation loss to increase.  Patiences are currently not applied when training and validating on generated training samples from uniform parameter distributions,  therefore training will stop when reaching the number of epoches.  The patience parameter will be considered in the future when training with real data or generated data with other distributions. \n\n\n\n\n\n","category":"type"},{"location":"manual/estimators/#Prepare-network-and-data-for-training","page":"Estimators","title":"Prepare network and data for training","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"prepare_training","category":"page"},{"location":"manual/estimators/#Microstructure.prepare_training","page":"Estimators","title":"Microstructure.prepare_training","text":"prepare_training(arg::NetworkArg)\n\nReturn (mlp, inputs, labels, gt); mlp is the multi-layer perceptron network model for the biophysical model;  inputs and labels are arrays of signals and scaled tissue parameters used for supervised training; and gt is a dict containing the ground truth tissue parameters without applying scaling. Scaling is applied in the training labels to ensure different tissue parameters are roughly in the same range as they are optimized together. \n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"\"prepare_training\" calls two functions to generate task specific MLP and training samples:","category":"page"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"create_mlp","category":"page"},{"location":"manual/estimators/#Microstructure.create_mlp","page":"Estimators","title":"Microstructure.create_mlp","text":"create_mlp(\n    ninput::Int, \n    noutput::Int, \n    hiddenlayers::Tuple{Vararg{Int}}, \n    dropoutp::Union{<:AbstractFloat,Tuple{Vararg{<:AbstractFloat}}}\n    )\n\nReturn a mlp with ninput/noutput as the number of input/output channels, and number of units in each layer specified in hiddenlayers;  'dropoutp' contains the dropout probalibities for dropout layers; it can be a single value (one dropout layer before output) or same length as the hidden layers \n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"generate_samples","category":"page"},{"location":"manual/estimators/#Microstructure.generate_samples","page":"Estimators","title":"Microstructure.generate_samples","text":"generate_samples(\n    model::BiophysicalModel,\n    protocol::Protocol,\n    params::Tuple{Vararg{String}},\n    prior_range::Tuple{Vararg{Tuple{Float64,Float64}}}, \n    prior_dist::Tuple{Vararg{<:Any}},\n    nsample::Int,\n    paralinks::Union{Pair{String},Tuple{Vararg{Pair{String}}}},\n    sigma_range::Tuple{Float64, Float64},\n    sigma::Distribution,\n    noise_type::String=\"Gaussian\",\n    rng_seed,\n)\n\nGenerate and return training samples for a model using given priors of tissue parameters  and specified noise model (\"Gaussian\" or \"Rician\") and noise level.\n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/#Training-on-generated-training-samples","page":"Estimators","title":"Training on generated training samples","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"train_loop!","category":"page"},{"location":"manual/estimators/#Microstructure.train_loop!","page":"Estimators","title":"Microstructure.train_loop!","text":"train_loop!(\n    mlp::Chain, \n    arg::TrainingArg, \n    inputs::Array{Float64,2}, \n    labels::Array{Float64,2}\n)\n\nTrain and update the mlp and return a Dict of training logs with train loss, training data loss and validation data loss for each epoch. This function works on cpu, which is sufficiently fast for most cases.\n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"training","category":"page"},{"location":"manual/estimators/#Microstructure.training","page":"Estimators","title":"Microstructure.training","text":"training(\n    arg::TrainingArg, \n    net::NetworkArg, \n    rng_seed::Int\n)\n\nTrain and return the mlp, a Dict of training logs with train loss, training data loss and validation data loss for each epoch, and the training data the mlp was trained on. This function is for both cpu and gpu training\n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/#Test-on-you-data","page":"Estimators","title":"Test on you data","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"test","category":"page"},{"location":"manual/estimators/#Microstructure.test","page":"Estimators","title":"Microstructure.test","text":"test(mlp::Chain, data::Array{<:AbstractFloat,2}, ntest)\n\nReturn probabilistic estimates by applying a trained mlp to test data for ntest times with dropout layers on.\n\ntest(mlp::Chain, data::Array{<:AbstractFloat,2})\n\nGet deterministic estimates with dropout layers off\n\n\n\n\n\n","category":"function"},{"location":"manual/multithreads/#Multi-threads","page":"Multi threads","title":"Multi threads","text":"","category":"section"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"Multi-threads processing is recommended when using MCMC estimation. The neural network estimators are relatively fast and take only minutes training on CPU. ","category":"page"},{"location":"manual/multithreads/#Start-julia-in-terminal-with-multi-threads","page":"Multi threads","title":"Start julia in terminal with multi-threads","text":"","category":"section"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"~ % julia --threads auto","category":"page"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"You can also set enviornment variable by adding export JULIA_NUM_THREADS=auto in your bash profile, which will use multi-threads automatically when you start julia.","category":"page"},{"location":"manual/multithreads/#Multi-threads-for-MCMC-estimation","page":"Multi threads","title":"Multi-threads for MCMC estimation","text":"","category":"section"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"threading","category":"page"},{"location":"manual/multithreads/#Microstructure.threading","page":"Multi threads","title":"Microstructure.threading","text":"This method runs multi-threads MCMC estimation on dMRI data using a specified biophysical model, calls the voxel threading  method and save estimated parameters as nifti files. savedir includes both output path and file name prefix. Two-stage MCMC sampling methods are run if provided sampler is a Tuple of two samplers, where it will sample all the unknown parameters  using the first sampler then sample target tissue parameters in the second sampler while fixing the rest parameters to posterior means in the first MCMC.  \n\nthreading(\n    model_start::BiophysicalModel,\n    sampler::Union{Sampler,Tuple{Sampler,Sampler}},\n    dmri::MRI,\n    mask::MRI,\n    protocol::Protocol,\n    noise_model::Noisemodel,\n    savedir::String,\n)\n\nMethods that return mean and standard deviation of estimations from measurements array of size [Nmeas, Nvoxels] using single-stage or two-stage MCMC.\n\nthreading(\n    model_start::BiophysicalModel,\n    sampler::Sampler,\n    measurements::Array{Float64,2},\n    protocol::Protocol,\n    noise_model::Noisemodel,\n)\n\n\nthreading(\n    model_start::BiophysicalModel,\n    sampler::Tuple{Sampler,Sampler},\n    measurements::Array{Float64,2},\n    protocol::Protocol,\n    noise_model::Noisemodel,\n)\n\n\n\n\n\n","category":"function"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"Function threading calls pre_allocate and mcmc! for multi-threads processing. When provided sampler is a Tuple containing two Samplers, it uses a two-stage MCMC to get final estimates.","category":"page"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"pre_allocate","category":"page"},{"location":"manual/multithreads/#Microstructure.pre_allocate","page":"Multi threads","title":"Microstructure.pre_allocate","text":"pre_allocate(\n    model::BiophysicalModel, sampler::Sampler, datasize::Tuple{Int64,Int64}\n)\n\npre_allocate(\n    model::BiophysicalModel, sampler::Tuple{Sampler,Sampler}, datasize::Tuple{Int64,Int64}\n)\n\nAllocating spaces for caching computing results based on model, sampler and datasize. datasize is the size of data (Nmeas, Nvoxels) \n\n\n\n\n\n","category":"function"},{"location":"tutorials/3_data_generation/#How-to-generate-training-datasets","page":"How to generate training datasets","title":"How to generate training datasets","text":"","category":"section"},{"location":"tutorials/3_data_generation/","page":"How to generate training datasets","title":"How to generate training datasets","text":"Constructing...","category":"page"},{"location":"tutorials/3_data_generation/","page":"How to generate training datasets","title":"How to generate training datasets","text":"Also checkout Manual - Estimators ","category":"page"},{"location":"getting_started/#Minimal-steps","page":"Getting started","title":"Minimal steps","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Here includes the minimal steps for you to get started with your MRI dataset. Visit tutorial and manual pages for more feature demonstrations. ","category":"page"},{"location":"getting_started/#Start-julia-in-terminal-with-multi-threads","page":"Getting started","title":"Start julia in terminal with multi-threads","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"~ % julia --threads auto","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"You can also set enviornment variable by adding export JULIA_NUM_THREADS=auto in your bash profile, which will use multi-threads automatically when you start julia.","category":"page"},{"location":"getting_started/#Load-the-package-in-Julia","page":"Getting started","title":"Load the package in Julia","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"In your julia script or REPL:","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> using Microstructure","category":"page"},{"location":"getting_started/#Read-dMRI-data-and-perform-spherical-mean","page":"Getting started","title":"Read dMRI data and perform spherical mean","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Provide full path to the DWI file and acquisition files with following extensions: dwiname.bvals (.bval), dwiname.bvecs (.bvec), dwiname.techo, dwiname.tdelta and dwiname.tsmalldel. Provide all or a subset of the acquisition files depending on the data and model you use. ","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> (dMRI, protocol) = spherical_mean(\n                            joinpath(datadir, \"dwiname.nii.gz\"), \n                            save=true, \n                            joinpath(datadir, \"dwiname.bvals\"), \n                            joinpath(datadir, \"dwiname.bvecs\"), \n                            joinpath(datadir, \"dwiname.techo\"), \n                            joinpath(datadir, \"dwiname.tdelta\"), \n                            joinpath(datadir, \"dwiname.tsmalldel\")\n                            )","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"You might also need to read a tissue mask to define the region you want to process:","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> using Fibers\njulia> mask = mri_read(joinpath(datadir, \"mask.nii.gz\"))","category":"page"},{"location":"getting_started/#Specify-the-model-we-want-to-use-and-get-a-MCMC-sampler-for-it","page":"Getting started","title":"Specify the model we want to use and get a MCMC sampler for it","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Here, we use a multi-echo spherical mean model which is curently under testing as an example:","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> model_start = MTE_SMT(axon = Stick(dpara = 1.7e-9, t2 = 90e-3), extra = Zeppelin(dpara = 1.7e-9, t2 = 60e-3))\njulia> nsample, burnin, thinning = 20000, 1000, 100\njulia> sampler_smt = Sampler(model_start, nsample, burnin, thinning)","category":"page"},{"location":"getting_started/#MCMC-Estimation","page":"Getting started","title":"MCMC Estimation","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> savename = joinpath(datadir, \"mte_smt.\")\njulia> threading(model_start, sampler_smt, dMRI, mask, protocol, Noisemodel(), savename)","category":"page"},{"location":"manual/compartments/#Tissue-Compartments","page":"Tissue Compartments","title":"Tissue Compartments","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"This page introduces Compartment types with fields of relevant tissue parameters and forward functions inferencing signals from the compartment model and imaging protocol. Featuring spherical mean based models with compartmental relaxation-weighting.","category":"page"},{"location":"manual/compartments/#Overview","page":"Tissue Compartments","title":"Overview","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"Compartment","category":"page"},{"location":"manual/compartments/#Microstructure.Compartment","page":"Tissue Compartments","title":"Microstructure.Compartment","text":"Compartment Type is an abstract type that includes the Cylinder, Stick, Zeppelin, Sphere and Iso type.  A Compartment Type object contains relevant tissue parameters that affect the MRI signals. Each type of compartment contain a t2 field for combined-diffusion-T2 imaging.  When your data supports only T2-weighted compartment modelling, i.e. acquired with single-TE,  set the t2 field to zero for conventional dMRI modelling. \n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#Axonal-and-dendritic-compartments","page":"Tissue Compartments","title":"Axonal and dendritic compartments","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"Cylinder","category":"page"},{"location":"manual/compartments/#Microstructure.Cylinder","page":"Tissue Compartments","title":"Microstructure.Cylinder","text":"Cylinder(\n    da::Float64, \n    dpara::Float64, \n    d0::Float64, \n    t2::Float64\n    )\n\nReturn a Cylinder Type object with the cylinder diameter da, parallel diffusivity dpara,  the intrinsic diffusivity d0 and the T2 relaxation time t2. \n\nExamples\n\njulia> Cylinder(da = 3.0e-6, dpara = 1.8e-9, d0 = 1.7e-9, t2 = 90e-3)\nCylinder(3.0e-6, 1.8e-9, 1.7e-9, 0.09)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"Stick","category":"page"},{"location":"manual/compartments/#Microstructure.Stick","page":"Tissue Compartments","title":"Microstructure.Stick","text":"Stick(dpara::Float64, t2::Float64)\n\nReturn a Stick Type object with parallel diffusivity dpara and T2 relaxation time t2.  The perpendicular diffusivity of a Stick model is zero. \n\nExamples\n\njulia> Stick(dpara = 1.7e-6, t2 = 60e-3)\nStick(1.7e-6, 0.06)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#Extra-cellular-compartment","page":"Tissue Compartments","title":"Extra-cellular compartment","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"Zeppelin","category":"page"},{"location":"manual/compartments/#Microstructure.Zeppelin","page":"Tissue Compartments","title":"Microstructure.Zeppelin","text":"Zeppelin(\n    dpara::Float64, \n    dperp_frac::Float64, \n    t2::Float64\n    )\n\nReturn a Zeppelin Type object with parallel diffusivity dpara, axially symmetric  perpendicular diffusivity represented as a fraction of the parallel diffusivity dperp_frac, and the T2 relaxation time t2.\n\nExamples\n\njulia> Zeppelin(dpara = 1.7e-6, dperp_frac = 0.5, t2 = 0.0)\nZeppelin(1.7e-6, 0.5, 0.0)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#Cell-body-compartment","page":"Tissue Compartments","title":"Cell body compartment","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"Microstructure.Sphere","category":"page"},{"location":"manual/compartments/#Microstructure.Sphere","page":"Tissue Compartments","title":"Microstructure.Sphere","text":"Sphere(\n    diff::Float64, \n    size::Float64, \n    t2::Float64\n    )\n\nReturn a Sphere Type object with diffusivity within sphere diff, spherical radius size, and T2 relaxation time t2.\n\nExamples\n\njulia> Sphere(diff = 3.0e-9, size = 8.0e-6, t2 = 45e-3)\nSphere(3.0e-9, 8.0e-6, 0.045)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#CSF-and-dot-compartment","page":"Tissue Compartments","title":"CSF and dot compartment","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"Iso","category":"page"},{"location":"manual/compartments/#Microstructure.Iso","page":"Tissue Compartments","title":"Microstructure.Iso","text":"Iso(diff::Float64, t2=Float64)\n\nReturn an isotropic tensor with diffusivity diff and T2 relaxation time t2.  This compartment can be used to represent CSF (diff = free water) or dot compartment (diff = 0).  The latter is for immobile water typically seen in ex vivo tissue.  This compartment can also represent an isotropic extra-cellular environment with diffusivity diff slower than free water.\n\nExamples\n\njulia> Iso(diff = 3.0e-9,t2 = 2000.0e-3)\nIso(3.0e-9, 2.0)\n\njulia> Iso(diff = 0.0)\nIso(0.0, 0.0)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#Compartment-signals","page":"Tissue Compartments","title":"Compartment signals","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"This function implements different methods for different compartment Types to generate compartment signals.","category":"page"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"compartment_signals","category":"page"},{"location":"manual/compartments/#Microstructure.compartment_signals","page":"Tissue Compartments","title":"Microstructure.compartment_signals","text":"compartment_signals(model::Compartment,protocol::Protocol)\n\nReturn compartment signals given a compartment object model and a imaging protocol.  model can be the Cylinder/Zeppelin/Stick/Sphere/Iso Type. When t2 in compartment model is set as default (0),  relaxation-weightings are not considered in the signal equation.\n\nReferences\n\nIf you use these compartments to build models, please cite the recommended references. \n\nFor using any compartment in current release, please cite the following references for expressions of spherical mean/power averaging:\n\nCallaghan, P.T., Jolley, K.W., Lelievre, J., 1979. Diffusion of water in the endosperm tissue of wheat grains as studied by pulsed field gradient nuclear magnetic resonance. Biophys J 28, 133. https://doi.org/10.1016/S0006-3495(79)85164-4\n\nKroenke, C.D., Ackerman, J.J.H., Yablonskiy, D.A., 2004. On the nature of the NAA diffusion attenuated MR signal in the central nervous system. Magn Reson Med 52, 1052–1059. https://doi.org/10.1002/MRM.20260\n\nKaden, E., Kruggel, F., Alexander, D.C., 2016. Quantitative mapping of the per-axon diffusion coefficients in brain white matter. Magn Reson Med 75, 1752–1763. https://doi.org/10.1002/MRM.25734\n\nConsider the following reference for overview of all tissue compartments:\n\nPanagiotaki, E., Schneider, T., Siow, B., Hall, M.G., Lythgoe, M.F., Alexander, D.C., 2012. Compartment models of the diffusion MR signal in brain white matter: A taxonomy and comparison. Neuroimage 59, 2241–2254. \n\nCylinder compartment:\n\nVan Gelderen, P., Des Pres, D., Van Zijl, P.C.M., Moonen, C.T.W., 1994. Evaluation of Restricted Diffusion in Cylinders. Phosphocreatine in Rabbit Leg Muscle. J Magn Reson B 103, 255–260. https://doi.org/10.1006/JMRB.1994.1038\n\nAlexander, D.C., Hubbard, P.L., Hall, M.G., Moore, E.A., Ptito, M., Parker, G.J.M., Dyrby, T.B., 2010. Orientationally invariant indices of axon diameter and density from diffusion MRI. Neuroimage 52, 1374–1389. https://doi.org/10.1016/j.neuroimage.2010.05.043\n\nFan, Q., Nummenmaa, A., Witzel, T., Ohringer, N., Tian, Q., Setsompop, K., Klawiter, E.C., Rosen, B.R., Wald, L.L., Huang, S.Y., 2020. Axon diameter index estimation independent of fiber orientation distribution using high-gradient diffusion MRI. Neuroimage 222. \n\nAndersson, M., Pizzolato, M., Kjer, H.M., Skodborg, K.F., Lundell, H., Dyrby, T.B., 2022. Does powder averaging remove dispersion bias in diffusion MRI diameter estimates within real 3D axonal architectures? Neuroimage 248. \n\nSphere compartment:\n\nNeuman, C.H., 1974. Spin echo of spins diffusing in a bounded medium. J Chem Phys 4508–4511. https://doi.org/10.1063/1.1680931\n\nBalinov, B., Jönsson, B., Linse, P., Söderman, O., 1993. The NMR Self-Diffusion Method Applied to Restricted Diffusion. Simulation of Echo Attenuation from Molecules in Spheres and between Planes. J Magn Reson A 104, 17–25. https://doi.org/10.1006/JMRA.1993.1184\n\nStick compartment:\n\nBehrens, T.E.J., Woolrich, M.W., Jenkinson, M., Johansen-Berg, H., Nunes, R.G., Clare, S., Matthews, P.M., Brady, J.M., Smith, S.M., 2003. Characterization and Propagation of Uncertainty in Diffusion-Weighted MR Imaging. Magn Reson Med 50, 1077–1088. https://doi.org/10.1002/MRM.10609\n\nPanagiotaki, E., Schneider, T., Siow, B., Hall, M.G., Lythgoe, M.F., Alexander, D.C., 2012. Compartment models of the diffusion MR signal in brain white matter: A taxonomy and comparison. Neuroimage 59, 2241–2254. \n\nZhang, H., Schneider, T., Wheeler-Kingshott, C.A., Alexander, D.C., 2012. NODDI: Practical in vivo neurite orientation dispersion and density imaging of the human brain. Neuroimage 61, 1000–1016. https://doi.org/10.1016/j.neuroimage.2012.03.072\n\nZeppelin & Iso:\n\nAlexander, D.C., 2008. A General Framework for Experiment Design in Diffusion MRI and Its Application in Measuring Direct Tissue-Microstructure Features. Magn Reson Med 60, 439–448. https://doi.org/10.1002/mrm.21646\n\nPanagiotaki, E., Schneider, T., Siow, B., Hall, M.G., Lythgoe, M.F., Alexander, D.C., 2012. Compartment models of the diffusion MR signal in brain white matter: A taxonomy and comparison. Neuroimage 59, 2241–2254. \n\nZhang, H., Schneider, T., Wheeler-Kingshott, C.A., Alexander, D.C., 2012. NODDI: Practical in vivo neurite orientation dispersion and density imaging of the human brain. Neuroimage 61, 1000–1016. https://doi.org/10.1016/j.neuroimage.2012.03.072\n\nCompartmental T2-weighting:\n\nVeraart, J., Novikov, D.S., Fieremans, E., 2017. TE dependent Diffusion Imaging (TEdDI) distinguishes between compartmental T 2 relaxation times. https://doi.org/10.1016/j.neuroimage.2017.09.030\n\nLampinen, B., Szczepankiewicz, F., Novén, M., van Westen, D., Hansson, O., Englund, E., Mårtensson, J., Westin, C.F., Nilsson, M., 2019. Searching for the neurite density with diffusion MRI: Challenges for biophysical modeling. Hum Brain Mapp 40, 2529–2545. https://doi.org/10.1002/hbm.24542\n\nGong, T., Tong, Q., He, H., Sun, Y., Zhong, J., Zhang, H., 2020. MTE-NODDI: Multi-TE NODDI for disentangling non-T2-weighted signal fractions from compartment-specific T2 relaxation times. Neuroimage 217. https://doi.org/10.1016/j.neuroimage.2020.116906\n\nGong, T., Tax, C.M., Mancini, M., Jones, D.K., Zhang, H., Palombo, M., 2023. Multi-TE SANDI: Quantifying compartmental T2 relaxation times in the grey matter. Toronto.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/4_noise_propagation/#How-to-evaluate-accuracy-and-precision","page":"How to evaluate accuracy and precision","title":"How to evaluate accuracy and precision","text":"","category":"section"},{"location":"tutorials/4_noise_propagation/","page":"How to evaluate accuracy and precision","title":"How to evaluate accuracy and precision","text":"Constructing...","category":"page"},{"location":"#What-is-Microstructure.jl-for?","page":"Home","title":"What is Microstructure.jl for?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Microstructure.jl is a Julia toolbox aiming at fast and probabilistic microstructure imaging with diffusion and combined diffusion-relaxometry MRI. Microstructure imaging enables the estimation of biologically meaningful cellular parameters from MRI data. This is achieved by simplifying the tissue within a voxel into multiple compartments representing different cellular structures, e.g. axons and cell bodies etc. Each tissue compartment has unique features that affect the MR signals under a measurement protocol, thus allowing their estimation through solving an inverse problem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Since MRI measurements are typically noisy and exhibit varying sensitivities to tissue features, point estimation methods, which provide a single estimate of each tissue parameter, are often insufficient for understanding the meaningfulness of the estimated tissue parameters. To address this issue, many previous studies have investigated more extensive methods such as Markov Chain Monte Carlo (MCMC) sampling, to sample the posterior distributions of tissue parameters and thereby obtain the probability of the estimates. However, such methods have seen limited applications in neuroimaging studies due to the significantly longer computation time required for analyzing whole-brain datasets. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Microstructure.jl aims to reduce the computation time required for probabilistic microstructure imaging by leveraging Julia's high performance design. It does not directly address limitations in microstructure modelling itself but aims to serve as a flexible tool to better investigate modelling assumptions and model performance. General recommendations for model fitting will be shared after testing and optimization.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you are interested, please try it out! The getting started page includes the minimal steps for beginning with your MRI dataset. Visit manual and upcoming tutorials for more feature demonstrations, recommendations and references!","category":"page"},{"location":"#Feature-Summary","page":"Home","title":"Feature Summary","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Combined diffusion-relaxometry compartment modelling\nFlexible in creating models and adjusting assumptions\nGeneric MCMC and neural network estimators\nFaster MCMC with Parallel computing\nCompatible with the probabilistic programming language Turing.jl","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Microstructure.jl, type ] in Julia to enter package mode and add the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n(@v1.10) pkg> add Microstructure","category":"page"},{"location":"","page":"Home","title":"Home","text":"Microstructure.jl is under active development and is frequently updated. To ensure you have the latest version, use the following command in the package mode:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.10) pkg> up Microstructure","category":"page"},{"location":"#Relationship-to-Other-Packages","page":"Home","title":"Relationship to Other Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Microstructure.jl focuses on tissue microstructure estimation. If you are also interested in fiber orientation and tractography, please check out Fibers.jl. Microstructure.jl also uses I/O functions from Fibers.jl for reading and writing mri image files. ","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Development of this package is supported by the NIH National Institute of Neurologic Disorders and Stroke (grants UM1-NS132358, R01-NS119911, R01-NS127353).","category":"page"}]
}
