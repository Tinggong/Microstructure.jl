var documenterSearchIndex = {"docs":
[{"location":"manual/models/#Microstructure-Models","page":"Microstructure Models","title":"Microstructure Models","text":"","category":"section"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"This page introduces several biophysical models. A biophysical model includes several tissue compartments and other parameters including compartment fractions and signals.","category":"page"},{"location":"manual/models/#Microstructure.BiophysicalModel","page":"Microstructure Models","title":"Microstructure.BiophysicalModel","text":"All models in this page belong to the BiophysicalModel Type. You can also build your models with desired combinations of compartments using a similar syntax.  In each model, all compartmental parameters can be considered \"free parameters\" and sampled using MCMC.  This is designed to offer maximum flexibility in adjusting model assumptions, but it doesn't guarantee reliable estimation of all parameters.  It's common that we need to fix or link some tissue parameters based on our data measurement protocols and our tissue parameters of interest. Parameter fixing and linking can be achieved by settings in MCMC sampler in the estimator module.\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#dMRI-models","page":"Microstructure Models","title":"dMRI models","text":"","category":"section"},{"location":"manual/models/#WM-models","page":"Microstructure Models","title":"WM models","text":"","category":"section"},{"location":"manual/models/#Microstructure.ExCaliber","page":"Microstructure Models","title":"Microstructure.ExCaliber","text":"ExCaliber(\n    axon::Cylinder,\n    extra::Zeppelin,\n    dot::Iso,\n    fracs::Vector{Float64}\n    )\n\nExCaliber is a multi-compartment model for estimating axon diameter. It can be used for ex vivo imaging when the diffusivity in the ISO compartment is set to 0 (dot compatment), and for in vivo imaging if the diffusivity of the ISO compartment is set to free water in tissue (CSF compartment).  \n\nReference\n\nGong, T., Maffei, C., Dann, E., Lee, H.-H., Lee, H., Augustinack, J.C., Huang, S.Y., Haber, S.N., Yendiki, A., 2025. Interplay between MRI-based axon diameter and myelination estimates in macaque and human brain. Imaging Neuroscience. https://doi.org/10.1162/IMAGA00576\n\nFan, Q., Nummenmaa, A., Witzel, T., Ohringer, N., Tian, Q., Setsompop, K., ... & Huang, S. Y. (2020). Axon diameter index estimation independent of fiber orientation distribution using high-gradient diffusion MRI. Neuroimage, 222, 117197.\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#GM-models","page":"Microstructure Models","title":"GM models","text":"","category":"section"},{"location":"manual/models/#Microstructure.SANDI","page":"Microstructure Models","title":"Microstructure.SANDI","text":"SANDI(\n    soma::Sphere,\n    neurite::Stick,\n    extra::Iso,\n    fracs::Vector{Float64}\n    )\n\nThe soma and neurite density imaging (SANDI) model uses a sphere compartment to model the cell soma,  a stick compartment to model the neurite and an isotropic diffusion compartment for the extra-cellular space;  It includes all the tissue parameters in each compartment and a fracs vector representing the fraction of  intra-soma signal and intra-neurite signal (the extra-cellular signal fraction is 1-sum(fracs)). For SANDI model, ignore the field of t2 in all compartments and set them to 0.\n\nReference\n\nPalombo, M., Ianus, A., Guerreri, M., Nunes, D., Alexander, D.C., Shemesh, N., Zhang, H., 2020. SANDI: A compartment-based model for non-invasive apparent soma and neurite imaging by diffusion MRI. Neuroimage 215. https://doi.org/10.1016/j.neuroimage.2020.116835\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#Microstructure.SANDIdot","page":"Microstructure Models","title":"Microstructure.SANDIdot","text":"SANDIdot(\n    soma::Sphere \n    neurite::Stick\n    extra::Iso \n    dot::Iso\n    fracs::Vector{Float64} \n)\n\nSANDIdot model includes additionally a dot compartment for SANDI model; the dot compartment is considered as immobile water and is more commonly seen in ex vivo imaging. For SANDIdot model, ignore the field of t2 in all compartments and set them to 0. The fraction vector represents fractions of the soma,  neurite and dot with the fraction of extra being 1-sum(fracs).\n\nReference\n\nAlexander, D.C., Hubbard, P.L., Hall, M.G., Moore, E.A., Ptito, M., Parker, G.J.M., Dyrby, T.B., 2010. Orientationally invariant indices of axon diameter and density from diffusion MRI. Neuroimage 52, 1374–1389. https://doi.org/10.1016/j.neuroimage.2010.05.043\n\nPanagiotaki, E., Schneider, T., Siow, B., Hall, M.G., Lythgoe, M.F., Alexander, D.C., 2012. Compartment models of the diffusion MR signal in brain white matter: A taxonomy and comparison. Neuroimage 59, 2241–2254. \n\nPalombo, M., Ianus, A., Guerreri, M., Nunes, D., Alexander, D.C., Shemesh, N., Zhang, H., 2020. SANDI: A compartment-based model for non-invasive apparent soma and neurite imaging by diffusion MRI. Neuroimage 215. https://doi.org/10.1016/j.neuroimage.2020.116835\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#Combined-diffusion-relaxometry-models","page":"Microstructure Models","title":"Combined diffusion-relaxometry models","text":"","category":"section"},{"location":"manual/models/#Microstructure.MTE_SMT","page":"Microstructure Models","title":"Microstructure.MTE_SMT","text":"MTE_SMT(\n    axon::Stick = Stick()\n    extra::Zeppelin = Zeppelin()\n    fracs::Float64 = 0.5\n    )\n\nThis is a model using multi-TE spherical mean technique for lower b-value in vivo imaging. Compartmental T2s are considered.  There is not a specific reference for this model yet, but you can refer to previous work related to this topic:\n\nKaden, E., Kruggel, F., Alexander, D.C., 2016. Quantitative mapping of the per-axon diffusion coefficients in brain white matter. Magn Reson Med 75, 1752–1763. https://doi.org/10.1002/MRM.25734\n\nKaden, E., Kelm, N. D., Carson, R. P., Does, M. D., & Alexander, D. C. (2016). Multi-compartment microscopic diffusion imaging. NeuroImage, 139, 346-359.\n\nVeraart, J., Novikov, D.S., Fieremans, E., 2017. TE dependent Diffusion Imaging (TEdDI) distinguishes between compartmental T 2 relaxation times. https://doi.org/10.1016/j.neuroimage.2017.09.030\n\nGong, T., Tong, Q., He, H., Sun, Y., Zhong, J., Zhang, H., 2020. MTE-NODDI: Multi-TE NODDI for disentangling non-T2-weighted signal fractions from compartment-specific T2 relaxation times. Neuroimage 217. https://doi.org/10.1016/j.neuroimage.2020.116906\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#Microstructure.MTE_SANDI","page":"Microstructure Models","title":"Microstructure.MTE_SANDI","text":"MTE_SANDI(\n    soma::Sphere \n    neurite::Stick\n    extra::Iso \n    fracs::Vector{Float64} \n    )\n\nFor Multi-echo-SANDI (MTE-SANDI) model, consider the t2 values in all compartments,  and the fractions estimated will be non-T2-weighted compartment fractions in comparison to the model mentioned above. \n\nReference\n\nGong, T., Tax, C.M., Mancini, M., Jones, D.K., Zhang, H., Palombo, M., 2023. Multi-TE SANDI: Quantifying compartmental T2 relaxation times in the grey matter. Toronto.\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#Prediction-of-MRI-signals","page":"Microstructure Models","title":"Prediction of MRI signals","text":"","category":"section"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"This function implements different methods for different BiophysicalModel types.","category":"page"},{"location":"manual/models/#Microstructure.model_signals","page":"Microstructure Models","title":"Microstructure.model_signals","text":"model_signals(model::BiophysicalModel,prot::Protocol[,links])\n\nReture predicted model signals from BiophysicalModel model and imaging protocol 'prot'.     links is a optional argument that specify parameter links in the model.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/1_build_models/#How-to-build-a-microstructure-model","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"","category":"section"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"This page introduces some simple steps for you to observe how tissue microstructrure parameters affect dMRI spherical mean signals using some biphysical models. ","category":"page"},{"location":"tutorials/1_build_models/#1.-diffusion-MRI-model","page":"How to build a microstructure model","title":"1. diffusion MRI model","text":"","category":"section"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Load the module","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"using Microstructure","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Specify the acquisition parameters and make a protocol. In real case, you can read a protocol from your acquisition text files","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"bval = [0, 1000, 2500, 5000, 7500, 11100, 18100, 25000, 43000].*1.0e6\nn = length(bval)\ntecho = 40.0.*ones(n,).*1e-3\ntdelta = 15.192.*ones(n,).*1e-3\ntsmalldel = 11.0.*ones(n,).*1e-3\nprot = Protocol(bval,techo,tdelta,tsmalldel)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Specify a model containing all the tissue parameters. Here, the example ExCaliber is a model for estimating axon diameter in ex vivo tissue using the spherical mean technique","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"estimates = ExCaliber()","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can check how the tissue is modelled by printing the model. It will give you all the tissue compartments","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"print_model(estimates)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can check the values in the tissue model by using @show macro. This will show the default values if you didn't specify parameters when declare a model","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"@show estimates","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can specify tissue parameters when declearing a model; fields/subfiedls that are not specified will take the default values","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"estimates = ExCaliber( axon = Cylinder(da = 4.0e-6, dpara = 0.7e-9))","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can change the fields/subfields of a decleared model struct by using update! funciton.","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"a. update a field/subfields","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"undate!(estimates, \"axon.da\" => 5.0e-6)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"It's common that we need to link certain tissue parameters in some models as they may not be distinguishable under the experimental condition.","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"b. update a field/subfield using parameter links.","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"update!(estimates,\"axon.d0\" => \"axon.dpara\")","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"c. update multiple parameters","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"update!(estimates,(\"axon.da\" => 5.0e-6, \"axon.dpara\" => 0.5e-9, \"axon.d0\" => \"axon.dpara\", \"extra.dpara\" => \"axon.dpara\"))","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Now we can use the model and protocol to generate some mri signals","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"signals = model_signals(estimates,prot)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"We can add some noise to the signals to make them look like real measurements","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"using Random, Distributions\n\nsigma = 0.01 # SNR=100 at S(b=0,t=TEmin) (b=0 of minimal TE)\nnoise = Normal(0,sigma)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Add some Gaussian noise","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"meas = signals .+ rand(noise,size(signals))","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"or Rician noise","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"meas_rician = sqrt.((signals .+ rand(noise,size(signals))).^2.0 .+ rand(noise,size(signals)).^2.0)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can check the predict signals and simulated measurements by ploting them","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"using Plots\nplot(prot.bval, signals, label=\"predicted signals\", lc=:black, lw=2)\nscatter!(prot.bval, meas, label=\"noisy measurements\", mc=:red, ms=2, ma=0.5)\nxlabel!(\"b-values [s/m^2]\")","category":"page"},{"location":"tutorials/1_build_models/#2.-Combined-Diffusion-relaxometry-model","page":"How to build a microstructure model","title":"2. Combined Diffusion-relaxometry model","text":"","category":"section"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Now let's look at a diffusion-relaxometry model MTE-SANDI. Similarly, declear a model object and check the values","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"model = MTE_SANDI()\nprint_model(model)\n@show model","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"MTE_SANDI requires data acquired at multiple echo times to solve the inverse problem and we will define a different protocol for it.","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Make a multi-TE protocol","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"nTE = 4\nnb = 9\nbval = repeat([0, 1000, 2500, 5000, 7500, 11100, 18100, 25000, 43000].*1.0e6, outer=nTE)\ntecho = repeat([32, 45, 60, 78].*1e-3, inner=9)\ntdelta = 15.192.*ones(nTE*nb,).*1e-3\ntsmalldel = 11.0.*ones(nTE*nb,).*1e-3\nprot = Protocol(bval,techo,tdelta,tsmalldel)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Let's see how multi-TE signals look like","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"signals = model_signals(model, prot)\nmeas = signals .+ rand(noise,size(signals))\n\nplot(signals, label=\"predicted signals\", lc=:black, lw=2)\nscatter!(meas, label=\"noisy measurements\", mc=:red, ms=2, ma=0.5)","category":"page"},{"location":"tutorials/5_model_selection/#Which-model-to-use","page":"Which model to use","title":"Which model to use","text":"","category":"section"},{"location":"tutorials/5_model_selection/","page":"Which model to use","title":"Which model to use","text":"Constructing...","category":"page"},{"location":"manual/dMRI/#I/O-functions","page":"I/O functions","title":"I/O functions","text":"","category":"section"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"This page introduces functions for reading dMRI data and protocols for microstructure imaging.","category":"page"},{"location":"manual/dMRI/#Read-from-DWI-data-and-get-spherical-mean-signals-and-imaging-protocols","page":"I/O functions","title":"Read from DWI data and get spherical mean signals & imaging protocols","text":"","category":"section"},{"location":"manual/dMRI/#Microstructure.spherical_mean","page":"I/O functions","title":"Microstructure.spherical_mean","text":"spherical_mean(\n    image_file::String, \n    save::Bool=true, \n    acq_files::String...\n)\n\nPerform direction average on input DWI images image_file and return an MRI object with normalized spherical mean signal and associated imaging protocol. image_file is the full path of the DWI image file; save indicates whether to save the smt and normalized smt image volumes and protocol. If saving the files, nifti and text file (.btable) will be saved in the same path as the input data. Finall, variable number of acq_files are text files that tell you acquistion parameters of each DWI in the image_file.  Accepted file extensions are .bvals/.bvecs/.techo/.tdelta/.tsmalldel for b-values, gradient directions, echo times, diffusion gradient seperation and duration times.\n\nBesides .bvals/.bvecs for conventional modelling, .tdelta/.tsmalldel files are needed for any models that estimate size, e.g. axon diameter, soma radius. .techo is needed if your data is collected with multiple echo-time and you want to do combined-diffusion relaxometry modelling.  The format of a .tdelta/.tsmalldel/.techo file is similar to a .bvals file (a vector with the length equal to the number of DWI volumes).  Unit in the .tdelta/.tsmalldel/.techo file is ms. \n\n\n\n\n\n","category":"function"},{"location":"manual/dMRI/#The-dMRI-and-Protocol-type","page":"I/O functions","title":"The dMRI and Protocol type","text":"","category":"section"},{"location":"manual/dMRI/#Microstructure.dMRI","page":"I/O functions","title":"Microstructure.dMRI","text":"dMRI(nifti::MRI, \ntdelta::Vector{Float64}, \ndsmalldel::Vector{Float64}, \ntecho::Vector{Float64}, \nsmt::Bool,\nnmeas::Vector{Int})\n\nReturn a dMRI Type object with MRI object nifti, and additional volume-wise  experimental settings tdelta, tsmalldel, techo, smt for identifing smt signals, and nmeas for the number of measurements. \n\n\n\n\n\n","category":"type"},{"location":"manual/dMRI/#Microstructure.Protocol","page":"I/O functions","title":"Microstructure.Protocol","text":"Protocol(\nbval::Vector{Float64}\ntecho::Vector{Float64}\ntdelta::Vector{Float64}\ntsmalldel::Vector{Float64}\ngvec::Vector{Float64}\nbvec::Matrix{Float64}\nnmeas::Vector{Float64}\n)\n\nReturn a Protocol Type object to hold parameters in acquisition protocol relavent for modelling  including b-values, tcho times, diffusion gradient seperation, duration, strengh, direction and the number of measurements.  Unit convention: most text files use s/mm^2 for b-values and ms for time while they are converted to SI unit in the Protocol. b-values (s/m^2); time (s); size (m); G (T/m) \n\nProtocol(\n    filename::String\n)\n\nReturn a Protocol Type object from a b-table file generated from spherical_mean function.\n\nProtocol(\n    bval::Vector{Float64},\n    techo::Vector{Float64},\n    tdelta::Vector{Float64},\n    tsmalldel::Vector{Float64},\n)\n\nCalculate gvec and return a Ptotocol Type object from provided parameters; other fields are not useful\n\nProtocol(\n    dmri::dMRI\n)\n\nReturn a Protocol Type object from a dMRI object.\n\n\n\n\n\n","category":"type"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"Write image and save protocol","category":"page"},{"location":"manual/dMRI/#Microstructure.dmri_write","page":"I/O functions","title":"Microstructure.dmri_write","text":"dmri_write(dmri::dMRI, datapath::String, filename::String)\n\nWrite the nifti volume in a dMRI object to nifti file and associated protocol as b-table text files in the given datapath and filename.\n\n\n\n\n\n","category":"function"},{"location":"guide/3_fitting_eval/#guide-eval","page":"Fitting evaluation","title":"Fitting evaluation","text":"","category":"section"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"Fitting on synthetic data is helpful for evaluating parameter estimation accuracy under different SNR levels or imaging protocols.  Using the ExCaliber model as an example, we generate signals from the forward model with varying tissue properties and perform MCMC sampling. We vary the axon diameter indices from 1 μm to 10 μm at 1 μm intervals. This range of evaluation extends slightly beyond the sensitivity ranges calculated before.","category":"page"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"The tissue parameters chosen for the synthetic data were values typically observed in ex vivo WM tissue: intra-axonal signal fraction  f_ia = 07, dot signal fraction f_dot = 015, extra-cellular signal fraction f_ec = 0.15, parallel diffusivity D_ = 06 𝜇m^2ms and perpendicular diffusivity D_ = 06 * 03 𝜇m^2ms. We tested three protocols with a single diffusion time and multiple b-values, where the maximum b-value was chosen to reach Gmax = 660 mT/m. The first had δ/∆ = 9.6/12 ms and b = 1, 2.5, 5, 7.5, 11.1, 18.1, 25 ms𝜇m^2 (7 b-values total), the second had δ/∆ = 11/15.192 ms and an additional b = 43 ms𝜇m^2 (8 b-values total), and the third had δ/∆ = 11/21 ms and an additional b = 64 ms𝜇m^2 (9 b-values total). Gaussian-distributed noise was added to generate 100 realizations of noisy spherical mean measurements; we show results for a moderate and lower SNR of 100 and 50 for the spherical mean measurements. ","category":"page"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"The code below demonstrates the evaluation for the shortest diffusion time and SNR =100:","category":"page"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"# %% packages used in this demo\nusing Microstructure\nusing Random, Distributions\nusing StatsPlots\nusing LaTeXStrings\nusing Plots.PlotMeasures\n\nfigdir = \"/Users/tgong/Work/Projects/Microstructure.jl/demos/Toolbox/figures\" \ndpi = 600  # figure resoluton\n\n#  change setting to test on different levels of SNR \nsnr = 100\n\n# make the imaging protocol \nbval = [0, 1000, 2500, 5000, 7500, 11100, 18100, 25000] .* 1.0e6\nnvol = length(bval)\ntecho = 40.0 .* ones(nvol) .* 1e-3\ntdelta = 12.0*ones(nvol) .* 1e-3\ntsmalldel = 9.6 .* ones(nvol) .* 1e-3\nprot = Protocol(bval, techo, tdelta, tsmalldel)\n\n# setup the MCMC sampler\n# set the tissue parameters you want to estimate in the model; \nparas = (\"axon.da\", \"axon.dpara\", \"extra.dperp_frac\", \"fracs\")\n# set parameter links\nparalinks = (\"axon.d0\" => \"axon.dpara\", \"extra.dpara\" => \"axon.dpara\")\n\n# set the range of priors and proposal distributions\npararange = ((1.0e-7, 1.0e-5), (0.01e-9, 1.2e-9), (0.0, 1.0), (0.0, 1.0))\nproposal = (\n    Normal(0, 0.25e-6), Normal(0, 0.025e-9), Normal(0, 0.05), MvNormal([0.0025 0; 0 0.0001])\n)\n\n# setup sampler and noise model\nsampler_full = Sampler(;\n    params=paras,\n    prior_range=pararange,\n    proposal=proposal,\n    paralinks=paralinks,\n    nsamples=70000,\n    burnin=20000,\n    thinning=100,\n)\nsampler_sub = subsampler(sampler_full, [1, 4])\nsampler = (sampler_full, sampler_sub)\n\ngaussian_noise = Noisemodel()\nmodel = ExCaliber(; axon=Cylinder(; da=5.0e-6))\n\n# simulate signals with different configurations of tissue parameters\nsigma = 1.0/snr  # noise level in simulation\nda_test = 1.0e-6:1.0e-6:10.0e-6  # tested range of axon diameter index\ndpara = 0.6e-9\ndperp_frac = 0.3\nfracs = [0.7, 0.15]\n\nRandom.seed!(1)\nN = 100 # the number of noise realization \n\n# get estimations \nest_sim = []\nest_std_sim = []\nfor ia in eachindex(da_test)\n    simpara = ExCaliber(;\n        axon=Cylinder(; da=da_test[ia], dpara=dpara, d0=dpara),\n        extra=Zeppelin(; dpara=dpara, dperp_frac=dperp_frac),\n        fracs=fracs,\n    )\n    signals = model_signals(simpara, prot)\n\n    # add gaussian noise\n    noise = rand(Normal(0, sigma), nvol, N)\n    meas = repeat(signals, 1, N) .+ noise\n\n    # normalizing measurements by the b0\n    meas = meas ./ repeat(meas[1, :], 1, nvol)'\n\n    # do MCMC sampling with multi-threads \n    est, est_std = threading(model, sampler, meas, prot, gaussian_noise)\n\n    push!(est_sim, est)\n    push!(est_std_sim, est_std) \nend","category":"page"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"We can then visualize the ground truth parameters vs. estimates as boxplots:","category":"page"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"# plot and save figure \nda_est = [est_sim[ia][1] for ia in eachindex(da_test)]\ndpara_est = [est_sim[ia][2] for ia in eachindex(da_test)]\ndperp_frac_est = [est_sim[ia][3] for ia in eachindex(da_test)]\nfrac_est = [reduce(hcat, est_sim[ia][4]) for ia in eachindex(da_test)]\nfia = [frac_est[ia][1, :] for ia in eachindex(da_test)]\nfdot = [frac_est[ia][2, :] for ia in eachindex(da_test)]\n\nf1 = boxplot(da_est*1e6; label=false, ylabel=L\"{\\mu}m\", ylims=(0, 10))\nplot!(da_test*1e6; lw=2, label=\"GT\")\n#annotate!(1,-1,text(L\"({\\mu}m)\", 10))\n\nf2 = boxplot(dpara_est*1e9; label=false, ylabel=L\"{{\\mu}m}^2/ms\", ylims=(0, 0.9))\nhline!([dpara]*1e9; lw=2, label=\"GT\")\nannotate!(1, -1, text(L\"({\\mu}m)\", 10))\n\nf3 = boxplot(dperp_frac_est; label=false, ylims=(0, 1))\nhline!([dperp_frac]; lw=2, label=\"GT\")\nannotate!(1, -1, text(L\"({\\mu}m)\", 10))\n\nf4 = boxplot(fia; label=false, ylims=(0, 1))\nhline!([fracs[1]]; lw=2, label=\"GT\")\nannotate!(1, -1, text(L\"({\\mu}m)\", 10))\n\nf5 = boxplot(fdot; label=false, ylims=(0, 0.5))\nhline!([fracs[2]]; lw=2, label=\"GT\")\nannotate!(1, -1, text(L\"({\\mu}m)\", 10))\n\ntitles =\n    [L\"d_{a}\" L\"D_{\\parallel}^{ia}\" L\"D_{\\perp}^{ec} to D_{\\parallel}^{ia} fraction \" L\"f_{ia}\" L\"f_{dot}\"]\nplot(\n    f1,\n    f2,\n    f3,\n    f4,\n    f5;\n    layout=(1, 5),\n    size=(1400, 250),\n    titles=titles,\n    xlabel=L\"diameter ({\\mu}m)\",\n    dpi=dpi,\n    left_margin=8mm,\n    bottom_margin=8mm,\n)\nsavefig(figdir * \"/Estimation_3c_fitd0_dt12_snr\" * string(snr))","category":"page"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"<img src=\"../assets/package_demo/Estimation_3c_fitd0_dt12_snr100.png\" width=800 /> ","category":"page"},{"location":"guide/3_fitting_eval/#Results","page":"Fitting evaluation","title":"Results","text":"","category":"section"},{"location":"guide/3_fitting_eval/#Measurements-with-a-single-diffusion-time","page":"Fitting evaluation","title":"Measurements with a single diffusion time","text":"","category":"section"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"Smaller axons had more precise diameter estimates and more accurate intra-axonal signal fractions than larger axons. However, diameter estimates in the low range were biased in a way that made different diameters more difficult to discriminate. In comparison, the diameters and intra-axonal signal fractions of larger axons were always under-estimated, while the dot signal fractions were more accurate. Among the different diffusion times, the shorter ones (∆ = 12 and 15.2 ms) maintained a consistent trend of axon diameter index estimates within the resolution limit (about 2-8 𝜇m). Comparison of the two SNR levels shows that the lower SNR (SNR = 50) decreased estimation precision for smaller axons but increased the discriminability of axon diameter indices in the low range. The lower SNR also increased bias for larger axons. These findings highlight the importance of performing such evaluations to understand the effects of different acquisition parameters on model fitting. ","category":"page"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"<embed src=\"../assets/package_demo/Figure6_ExCaliber_eval_sdt.pdf\" width=\"800px\" height=\"400px\" />","category":"page"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"Estimates of axon diameters from single diffusion time data when (A) SNR = 100 and (B) SNR = 50 for spherical mean signal. (i) Data generated with 7 values, bmax = 25 ms/𝜇m2 and δ/∆ = 9.6/12 ms; (ii) Data generated with 8 b-values, bmax = 43 ms/𝜇m2 and δ/∆ = 11/15.2 ms; (iii) Data generated with 9 b-values, bmax = 64 ms/𝜇m2 and δ/∆ = 11/21 ms. Parameter estimates from 100 noise realizations are shown as boxplots and ground-truth (GT) parameter values are shown as line plots. ","category":"page"},{"location":"guide/3_fitting_eval/#Measurements-with-multiple-diffusion-timee","page":"Fitting evaluation","title":"Measurements with multiple diffusion timee","text":"","category":"section"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"Including data with multiple diffusion times improved the accuracy of axon diameter estimation, with better discriminability between smaller axons and lower biases and variances for larger axons, particularly at high SNR.  However, at lower SNR, there was less to be gained by including multiple diffusion times vs. a single diffusion time, as the differences between signals with different diffusion times were very small. In real datasets, we need to consider if the SNR is sufficient for the differences between signals acquired with different diffusion times to be significant. When using data from all the diffusion times for fitting, both the bias and variance decreased substantially. ","category":"page"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"<embed src=\"../assets/package_demo/Figure7_ExCaliber_eval_mdt.pdf\" width=\"800px\" height=\"400px\" />","category":"page"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"Estimates of axon diameter from multi-diffusion time data when (A) SNR = 100 and (B) SNR = 50 for the spherical mean signal. (i) Data combining two shorter diffusion times: δ/∆ = 9.6/12 ms and δ/∆ = 11/15.2 ms; (ii) Data combing two longer diffusion times δ/∆ = 11/15.2 ms and δ/∆ = 11/21 ms; (iii) Data combining all three diffusion times. Parameter estimates from 100 noise realizations are shown as boxplots and ground-truth parameter values are shown as line plots. ","category":"page"},{"location":"guide/3_fitting_eval/#References","page":"Fitting evaluation","title":"References","text":"","category":"section"},{"location":"guide/3_fitting_eval/","page":"Fitting evaluation","title":"Fitting evaluation","text":"Gong, T., & Yendiki, A. (2024). Microstructure. jl: a Julia Package for Probabilistic Microstructure Model Fitting with Diffusion MRI. arXiv preprint arXiv:2407.06379.","category":"page"},{"location":"guide/5_sandi/#guide-sandi","page":"SANDI","title":"SANDI","text":"","category":"section"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"This tutorial demonstrates how to fit the soma and neurite density imaging (SANDI) (Palombo et al., 2020) using the neural network estimator.","category":"page"},{"location":"guide/5_sandi/#Datasets","page":"SANDI","title":"Datasets","text":"","category":"section"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"We used high b-value data acquired on the MGH Connectome 1.0 scanner (Tian et al., 2022) for this demo. The datasets were acquired at two diffusion times, Δ = 19 or 49 ms, diffusion-encoding gradient duration δ = 8 ms, 8 different b-values for each diffusion time (50, 350, 800, 1500, 2400, 3450, 4750, and 6000 smm^2 for Δ = 19 ms; 200, 950, 2300, 4250, 6750, 9850, 13,500, 17,800 smm^2 for Δ = 49 ms), 32 (for b < 2400 smm^2) or 64 (for b >= 2400 smm^2) diffusion encoding directions uniformly distributed on a sphere. We used a subset of the data with shorter diffusion time (b = 0, 350, 800, 1500, 2400, 3450, 4750, and 6000 smm^2 and Δ = 19 ms) for SANDI, considering that the assumption of no water exchange may be invalid at Δ = 49 in the GM (Palombo et al., 2020). We used datasets from 3 subjects with a scan and rescan to evaluate the stability of estimates. ","category":"page"},{"location":"guide/5_sandi/#Experiments","page":"SANDI","title":"Experiments","text":"","category":"section"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"The free parameters in the SANDI model are the intra-soma signal fraction f_is, soma radius R_s, intra-neurite signal fraction f_in, intra-neurite parallel diffusivity D_^in and diffusivity of the isotropic extra-cellular space D_ec. ","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"We generated 60,000 training samples with tissue parameters uniformly sampled from prior ranges of [2, 12] 𝜇m for R_s, [1.5, 2.5] 𝜇m^2ms for D_^in, and [0.5, 3.0] 𝜇m^2ms for D_ec. The compartment fractions were sampled from a Dirichlet distribution with equal concentration parameters for the three compartments. We generated signals for the training samples using the forward model and added Gaussian noise to the signals to generate noisy measurements. The noise level was set based on the temporal SNR of the b=0 images and the number of measurements used for direction averaging.","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"# packages used in this demo\nusing Fibers, Microstructure\nusing Distributions, Random\nusing JLD2, DelimitedFiles\nusing Flux, Plots\n\n# include utility functions for plotting\nsrcpath = dirname(pathof(Microstructure))\ninclude(joinpath(srcpath, \"../utils/utils.jl\"))\n\n# set the path to save generated figures\nfigdir = \"/Users/tgong/Work/Projects/Microstructure.jl/demos/Toolbox/figures\"\ndpi = 600  # figure resoluton\n\n# %%\n### 1. Get imaging protocol \ndatadir = \"/Users/tgong/Work/Database/Connectome1/sub_001/dwi_real\"\nprotocol = Protocol(joinpath(datadir, \"d1_diravg_norm.btable\"))\n\n### 2. Setup model and estimator\nmodel = SANDI(;\n    soma=Sphere(; diff=3.0e-9, size=8.0e-9),\n    neurite=Stick(; dpara=2.0e-9),\n    extra=Iso(; diff=2.0e-9),\n    fracs=[0.4, 0.4],\n)\n\n# parameters to estimate\nparams = (\"fracs\", \"soma.size\", \"neurite.dpara\", \"extra.diff\")\nprior_range = ((0.0, 1.0), (2.0e-6, 12.0e-6), (1.5e-9, 2.5e-9), (0.5e-9, 3.0e-9))\nprior_dist = (Dirichlet([1, 1, 1]), nothing, nothing, nothing)\nparalinks = ()\nnoise_type = \"Gaussian\"\nsigma_range = (0.002, 0.02)\nsigma_dist = Normal(0.006, 0.002)\n\n# network settings\nnsamples = 60000\nnin = 8\nnout = 5\nhidden_layers = (48, 48, 48)\ndropoutp = (0.1, 0.1, 0.1)\n\nnetarg = NetworkArg(\n    model,\n    protocol,\n    params,\n    prior_range,\n    prior_dist,\n    paralinks,\n    noise_type,\n    sigma_range,\n    sigma_dist,\n    nsamples,\n    nin,\n    nout,\n    hidden_layers,\n    dropoutp,\n    relu6,\n)\ntrainarg = TrainingArg(; batchsize=128, lossf=losses_rmse, device=cpu)\n\n# get mlp and training data\nmlp, logs, inputs, labels = training(trainarg, netarg)\n\n# visualize training log\nlogs_plt(logs, trainarg)","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"<img src=\"../assets/package_demo/Training_log_plot_sandi.png\" width=500 /> ","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"Performing fitting evaluation on synthetic data:","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"# get estimates\nntest = 100\nposteriors = test(mlp, inputs, ntest)\nest = mean(posteriors)\nest_std = std(posteriors)\n\n# get evaluation plot for each parameters in the model \nevalplots_mean, evalplots_std, para_range = eval_plt(netarg, est, est_std, labels)\n\n# plotting evaluation \ntitles = [L\"f_{is}\" L\"f_{in}\" L\"R_{soma}\" L\"D_{\\parallel}^{in}\" L\"D_{ec}\"]\nPlots.plot(\n    evalplots_mean[\"fracs1\"],\n    evalplots_mean[\"fracs2\"],\n    evalplots_mean[\"soma.size\"],\n    evalplots_mean[\"neurite.dpara\"],\n    evalplots_mean[\"extra.diff\"];\n    layout=(2, 3),\n    size=(900, 400),\n    legend=:none,\n    margin=5mm,\n    xguidefontsize=8,\n    yguidefontsize=10,\n    titles=titles,\n    xlabel=[L\"GT\" L\"GT\" L\"GT\\ [{\\mu}m]\" L\"GT\\ [{\\mu}m^2/ms]\" L\"GT\\ [{\\mu}m^2/ms]\"],\n    ylabel=L\"Estimates: Mean\",\n    dpi = dpi,\n)\n\nsavefig(joinpath(figdir, \"Eval_sandi_5p_\" * info * \"_mean.pdf\"))\n\nPlots.plot(\n    evalplots_std[\"fracs1\"],\n    evalplots_std[\"fracs2\"],\n    evalplots_std[\"soma.size\"],\n    evalplots_std[\"neurite.dpara\"],\n    evalplots_std[\"extra.diff\"];\n    layout=(2, 3),\n    size=(900, 400),\n    legend=:none,\n    margin=5mm,\n    xguidefontsize=8,\n    yguidefontsize=10,\n    titles=titles,\n    xlabel=[L\"GT\" L\"GT\" L\"GT\\ [{\\mu}m]\" L\"GT\\ [{\\mu}m^2/ms]\" L\"GT\\ [{\\mu}m^2/ms]\"],\n    ylabel=L\"Std/Prior\\ Range\",\n    dpi = dpi,\n)\n\nsavefig(joinpath(figdir, \"Eval_sandi_5p_\" * info * \"_std.pdf\"))","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"Apply trained network to real datasets:","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"studydir = \"/Users/tgong/Work/Database/Connectome1\"\nsubjs = (\n    \"sub_001\", \"sub_001_rescan\", \"sub_002\", \"sub_002_rescan\", \"sub_003\", \"sub_003_rescan\"\n)\nmodelname = \"sandi.5p.uniform.\"\n\nfor subj in subjs\n    datadir = joinpath(studydir, subj, \"dwi_real\")\n    dmri = mri_read(joinpath(datadir, \"d1_diravg_norm.nii.gz\"))\n    mask = mri_read(joinpath(datadir, subj*\"_dwi_real_brainmask.nii.gz\"))\n\n    savedir = joinpath(datadir, \"SANDI\")\n    mkpath(savedir)\n    nn_estimate(dmri, mask, mlp, netarg, ntest, savedir, modelname)\nend","category":"page"},{"location":"guide/5_sandi/#Results","page":"SANDI","title":"Results","text":"","category":"section"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"Fitting evaluation. While other model parameters can be accurately estimated, the D_^in cannot be estimated with the evaluated protocol, and the estimates tend to be biased towards the mean values of the prior distribution.  ","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"<embed src=\"../assets/package_demo/Figure10_SANDI_eval.pdf\" width=\"600px\" height=\"300px\" />","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"Fitting evaluations of the SANDI model on synthetic training data with uninformative priors. (a) 2D histograms of ground-truth labels vs. estimates; (b) the 2D histogram of ground-truth labels vs. the standard deviation of posteriors relative to used prior range; (c) the distributions of training labels. The signal fractions of the three tissue compartments are summed to 1 and follow the Dirichlet distribution. This evaluation suggests that the protocol is not sensitive to D_^in.","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"Parameter maps on real dataset. The uncertainty map of f_in features WM regions in the genu of corpus callosum with very low f_in estimates, which could potentially be outliers. The uncertainty maps of all parameters also feature a GM region with atypical values in the f_in, R_s and D_ec. The distributions of parameters in GM regions including caudate and putamen show high consistency among the 6 scans. ","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"<embed src=\"../assets/package_demo/Figure11_SANDI_map.pdf\" width=\"600px\" height=\"400px\" />","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"SANDI model fitting on in vivo human data acquired with ultra-high gradient strength. Only the four parameters that can be estimated robustly are shown here. (a) Parameter maps from one subject. The WM region highlighted by orange arrows in the genu of corpus callosum with low f_in values shows high uncertainty, suggesting potential outlier estimates. The GM region highlighted by white arrows showing atypical values in the f_in,  R_s and D_ec exhibits high uncertainties in all the parameters. (b) Probability density of estimates in GM ROIs (caudate and putamen) from 6 scans.","category":"page"},{"location":"guide/5_sandi/#References","page":"SANDI","title":"References","text":"","category":"section"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"Palombo, M., Ianus, A., Guerreri, M., Nunes, D., Alexander, D.C., Shemesh, N., Zhang, H., 2020. SANDI: A compartment-based model for non-invasive apparent soma and neurite imaging by diffusion MRI. Neuroimage 215. https://doi.org/10.1016/j.neuroimage.2020.116835","category":"page"},{"location":"guide/5_sandi/","page":"SANDI","title":"SANDI","text":"Tian, Q., Fan, Q., Witzel, T., Polackal, M.N., Ohringer, N.A., Ngamsombat, C., Russo, A.W., Machado, N., Brewer, K., Wang, F., Setsompop, K., Polimeni, J.R., Keil, B., Wald, L.L., Rosen, B.R., Klawiter, E.C., Nummenmaa, A., Huang, S.Y., 2022. Comprehensive diffusion MRI dataset for in vivo human brain microstructure mapping using 300 mT/m gradients. Scientific Data 2022 9:1 9, 1–11. https://doi.org/10.1038/s41597-021-01092-6","category":"page"},{"location":"tutorials/2_quality_of_fit/#How-to-check-quality-of-fitting-and-mcmc-samples","page":"How to check quality of fitting and mcmc samples","title":"How to check quality of fitting and mcmc samples","text":"","category":"section"},{"location":"tutorials/2_quality_of_fit/","page":"How to check quality of fitting and mcmc samples","title":"How to check quality of fitting and mcmc samples","text":"Constructing...","category":"page"},{"location":"guide/1_sensitivity_range/#guide-sensitivity","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"","category":"section"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"When estimating axon diameter indices from MRI data, the sensitivity range of such estimates is closely associated with experimental factors, such as gradient strength and diffusion times, and tissue properties such as the intrinsic diffusivity. Therefore, evaluation of experimental settings is important for understanding the validity of the axon diameter index. Following the sensitivity criterion for the PA signal introduced by previous studies (Andersson et al., 2022; Nilsson et al., 2017), we can conveniently calculate the sensitivity range of axon diameter index estimates obtained from Microstructure.jl. ","category":"page"},{"location":"guide/1_sensitivity_range/#For-single-high-b-value","page":"Sensitivity range of axon diameter index","title":"For single high b-value","text":"","category":"section"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"The sensitivity criterion concerns whether the normalized signal along a single gradient can be differentiated from the noise floor and the maximum signal. The smallest measurable signal attenuation overlineσ relates to the SNR level of the signal as follows:","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"overlineσ =  fracz_αSNRsqrtn","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"where n is the number of measurements and z_α is the z-threshold for the significance level α (z_α = 164 when α = 005). The PA signal from a Cylinder compartment is upper bounded by a Cylinder with zero diameter, which is equal to the Stick model signal. A Cylinder therefore has a measurable diameter if its PA signal falls within the range of overlineσ S_stick - overlineσ. Given a single b-value, the lower and upper bounds of axon diameter are thus the minimal diameter that gives S_cylinder smaller than S_stick - overlineσ and maximal diameter that gives S_cylinder above overlineσ.","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"We start by using the packages we need:","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"# We use Microstructure.jl for sensitivity analysis and other libraries for visualization \nusing Microstructure\nusing Plots\nusing LaTeXStrings\nusing Plots.PlotMeasures","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"Based on the sensitivity criterion, we can define the following function to calculate the sensitivity range for a given high b-value measurement:","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"\"\"\"\nCalculate the sensitivity range for axon diameter index with PA signal from a single b-value.\nInputs: \n    SNR: SNR level of data\n    n: the number of unique gradient directions for the b-value measurements\n    bval: b-value\n    tdelta: gradient seperation time\n    tsmalldel: gradient duration time\n    d0: the intrinsic diffusivity within intra-axonal compartment\nOutputs:\n    lower bound (m), upper bound (m), G (T/m)\n\"\"\"\n\nfunction axon_da_sensitivity(SNR, n, bval, tdelta, tsmalldel, d0)\n    za = 1.64\n    sigma = za ./ SNR ./ sqrt.(n)\n\n    # make a Protocol type object from the single-b measurement\n    prot = Protocol([bval], zeros(length(bval)), [tdelta], [tsmalldel])\n    \n    # generate signals from a Stick compartment and the protocol\n    Sstick = compartment_signals(Stick(; dpara=d0), prot)\n\n    # maximal signal\n    upperb = Sstick[1] - sigma\n\n    # the range of diameter indices for searching the lower and upper bounds\n    range_lb = 0.5e-6:0.01e-6:4.0e-6\n    range_ub = 5.0e-6:0.01e-6:20.0e-6\n\n    cyl = Cylinder(; dpara=d0, d0=d0)\n    for ia in eachindex(range_lb)\n        cyl.da = range_lb[ia]\n        signal = compartment_signals(cyl, prot)\n        signal[1] < upperb && break\n    end\n    da_min = cyl.da\n\n    for ia in eachindex(range_ub)\n        cyl.da = range_ub[ia]\n        signal = compartment_signals(cyl, prot)\n        signal[1] < sigma && break\n    end\n\n    da_max = cyl.da\n    return da_min, da_max, prot.gvec[1]\nend","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"An example call of the function that returns (1.76e-6, 5.63e-6, 0.6576631887436215), meaning sensitivity range of [1.76, 5.63] 𝜇m at G ≈ 658 mT/m (The package uses standard unit for computation):","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"axon_da_sensitivity(37, 32, 43.0*1e9, 15.192e-3, 11.0e-3, 0.6*1e-9)","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"To visualize the sensitivity ranges for different protocols, we define a function to plot the sensitivity profile from several b-values (G) with same diffusion times:","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"\n\"\"\"\nVisulize the sensitivity profile of axon diameter given several b-values\n    call the axon_da_sensitivity function and plot figures\n\"\"\"\nfunction sensitivity_plot(SNR, d0, bval_mea, tdelta, tsmalldel, n = 32)\n\n    da_min_mea = zeros(length(bval_mea))\n    da_max_mea = zeros(length(bval_mea))\n    g_mea = zeros(length(bval_mea))\n\n    # calculate sensitivity range for given b-values in the protocol \n    for ib in eachindex(bval_mea)\n        da_min_mea[ib], da_max_mea[ib], g_mea[ib] = axon_da_sensitivity(\n            SNR, n, bval_mea[ib], tdelta, tsmalldel, d0\n        )\n    end\n\n    # continous plots\n    bval = (000.0 * 1.0e6):(1000.0 * 1.0e6):max(bval_mea...)\n    da_min = zeros(length(bval))\n    da_max = zeros(length(bval))\n    G = zeros(length(bval))\n    for ib in eachindex(bval)\n        da_min[ib], da_max[ib], G[ib] = axon_da_sensitivity(\n            SNR, n, bval[ib], tdelta, tsmalldel, d0\n        )\n    end\n\n    xticks = bval_mea*1.0e-9\n    xlabel = L\"b: ms/{{\\mu}m}^2\"\n    yticks = [0.0, 2.0, 5.0, 8.0, 11.0, 15.0]\n    ylabel = L\"diameter: {\\mu}m\"\n    label = [\"lower bound\" \"upper bound\"]\n\n    p = plot(\n        bval*1.0e-9,\n        [da_min, da_max]*1.0e6;\n        xticks=xticks,\n        xlabel=xlabel,\n        yticks=yticks,\n        ylabel=ylabel,\n        label=label,\n        legend=:topright,\n        lw=2,\n        ylims=(0, 18),\n    )\n    scatter!(bval_mea*1.0e-9, [da_min_mea, da_max_mea]*1.0e6; label=false)\n    annotate!(\n        bval_mea*1.0e-9,\n        da_min_mea*1.0e6 .+ 1.5,\n        text.(round.(da_min_mea*1.0e6; digits=2), :top, :green, 8),\n    )\n    annotate!(\n        bval_mea[2:end]*1.0e-9,\n        da_max_mea[2:end]*1.0e6 .- 1.0,\n        text.(round.(da_max_mea[2:end]*1.0e6; digits=2), :right, :purple, 8),\n    )\n\n    vline!([xticks[1], xticks[end]]; line=(:dash), labels=false)\n    annotate!(\n        xticks[1]-2.5, 1, text(\"G=\"*string(round(Int, g_mea[1]*1000))*\"mT/m\", :top, 7, :red)\n    )\n    annotate!(\n        xticks[end]-4,\n        1,\n        text(\"G=\"*string(round(Int, g_mea[end]*1000))*\"mT/m\", :top, 7, :red),\n    )\n    return p\nend","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"The functions for visualizing sensitivity profiles are included as utility functions outside the package. You can use these functions by including the utility script in the package folder:","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"using Microstructure\nsrcpath = dirname(pathof(Microstructure))\ninclude(joinpath(srcpath, \"../utils/utils.jl\"))","category":"page"},{"location":"guide/1_sensitivity_range/#Experiments","page":"Sensitivity range of axon diameter index","title":"Experiments","text":"","category":"section"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"We calculate the sensitivity ranges of axon diameter estimation at different high b-values feasible on a 4.7 T preclinical scanner with maximum gradient strength Gmax = 660 mT/m.  We investigate the effects of diffusion time and b-value to sensitivity ranges by using different diffusion times that reach the Gmax with different b-values. We assume that the number of gradient directions is 32 and the ex vivo intrinsic diffusivity is 0.6 𝜇m^2ms. We consider SNR levels of 100, 50 and 30. ","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"Example for the median diffusion time:","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"# directory for saving figures\nfigdir = \"/Users/tgong/Work/Projects/Microstructure.jl/demos/Toolbox/figures\"\ndpi = 600\n\n# %%  evaluating protocol 2 \nbval_mea = [11100, 18100, 25000, 43000] .* 1.0e6\ntdelta = 15.2*1e-3\ntsmalldel = 11.0 .* 1e-3\n\np1 = sensitivity_plot(100.0, 0.6e-9, bval_mea, tdelta, tsmalldel)\np2 = sensitivity_plot(50.0, 0.6e-9, bval_mea, tdelta, tsmalldel)\np3 = sensitivity_plot(30.0, 0.6e-9, bval_mea, tdelta, tsmalldel)\n\ntitles = [\"SNR = 100\" \"SNR = 50\" \"SNR = 30\"]\nplot(\n    p1,\n    p2,\n    p3;\n    layout=(1, 3),\n    titles=titles,\n    titlefont=font(10),\n    xlabel=L\"b: ms/{{\\mu}m}^2\",\n    #xlabel=L\"b: ms/{{\\mu}m}^2; {\\delta}/{\\Delta}=11/15.2ms\",\n    left_margin=5mm,\n    bottom_margin=5mm,\n    xguidefontsize=10,\n    size=(800, 300),\n    dpi=dpi,\n)\nsavefig(figdir * \"/1_sensitivity_dt15\")","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"<img src=\"../assets/package_demo/1_sensitivity_dt15.png\" width=800 /> ","category":"page"},{"location":"guide/1_sensitivity_range/#Results","page":"Sensitivity range of axon diameter index","title":"Results","text":"","category":"section"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"For the same diffusion time, the sensitivity range shifts towards smaller axons when the gradient strength G and thus b-value increases, as seen in Figure 3(A-C) in our preprint. Higher gradient strengths yield sensitivity to smaller axons, which are most abundant in tissue. However, they also reduce the sensitivity to very large axons, e.g. axons with diameter > 7.5 𝜇m for G = 660 mT/m. For the same gradient strength G, shorter diffusion time and therefore lower b-value widens the sensitivity range on both sides. For example, see G≈ 660 mT/m, b = 25, 43 and 64 ms𝜇m^2 in Figure 3(A-C). For the same b-value, shorter diffusion time and thus higher G lowers the lower bound of axon diameters that can be estimated accurately but also reduces sensitivity to larger axons. This analysis suggests that using higher gradient strength and shorter diffusion time to achieve lower b-values is preferable, as it achieves a wider sensitivity range that covers most axon diameters expected in real tissue.","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"<embed src=\"../assets/package_demo/Figure3_sensitivity.pdf\" width=\"800px\" height=\"600px\" />","category":"page"},{"location":"guide/1_sensitivity_range/#For-multiple-high-b-values","page":"Sensitivity range of axon diameter index","title":"For multiple high b-values","text":"","category":"section"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"The above analysis assumes measurements with a single bvalue. If data are collected with multiple b-values that are sensitive to the practical range of axon diameter in tissue, the lower and upper bounds of S_cylinder (corresponding to the upper and lower bounds of axon diameter) become vectors [overlineσ, S_stick − overlineσ]. In this case, we can approximate the sensitivity range by finding the diameters that give minimal mean squared error (MSE) between their signals and signal bounds across all shells. For estimating the upper bound of axon diameters, we use only shells of high b-values because data with lower b-values can be sensitive to infinitely large axons, and if included their signal contributions will dominate the calculation of MSE. Considering the three high b-shells in Figure 3(B) for ex vivo imaging (b= 18.1, 25 and 43 ms/ 𝜇m2), the sensitivity ranges are [1.42, 10.5], [1.70, 9.18], and [1.94, 8.32] 𝜇m for SNR level of 100, 50 and 30 respectively.","category":"page"},{"location":"guide/1_sensitivity_range/#References","page":"Sensitivity range of axon diameter index","title":"References","text":"","category":"section"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"Andersson, M., Pizzolato, M., Kjer, H.M., Skodborg, K.F., Lundell, H., Dyrby, T.B., 2022. Does powder averaging remove dispersion bias in diffusion MRI diameter estimates within real 3D axonal architectures? Neuroimage 248. https://doi.org/10.1016/j.neuroimage.2021.118718","category":"page"},{"location":"guide/1_sensitivity_range/","page":"Sensitivity range of axon diameter index","title":"Sensitivity range of axon diameter index","text":"Nilsson, M., Lasič, S., Drobnjak, I., Topgaard, D., Westin, C.F., 2017. Resolution limit of cylinder diameter estimation by diffusion MRI: The impact of gradient waveform and orientation dispersion. NMR Biomed 30. https://doi.org/10.1002/NBM.3711","category":"page"},{"location":"guide/0_intro/#guide-intro","page":"Introduction to Microstructure.jl","title":"Introduction to Microstructure.jl","text":"","category":"section"},{"location":"guide/0_intro/","page":"Introduction to Microstructure.jl","title":"Introduction to Microstructure.jl","text":"This guide accompanies the demonstrations introduced in our preprint and provides an overview of how to use Microstructure.jl. We walk through the package from its building blocks to applying estabilished literature models on publicly available datasets. Hope this guide helps you understand the package and get started with using it in your own work. ","category":"page"},{"location":"guide/0_intro/","page":"Introduction to Microstructure.jl","title":"Introduction to Microstructure.jl","text":"If you find the package useful for your research, please consider citing our preprint:","category":"page"},{"location":"guide/0_intro/","page":"Introduction to Microstructure.jl","title":"Introduction to Microstructure.jl","text":"Gong, T., & Yendiki, A. (2024). Microstructure. jl: a Julia Package for Probabilistic Microstructure Model Fitting with Diffusion MRI. arXiv preprint arXiv:2407.06379.","category":"page"},{"location":"guide/0_intro/#Content","page":"Introduction to Microstructure.jl","title":"Content","text":"","category":"section"},{"location":"guide/0_intro/","page":"Introduction to Microstructure.jl","title":"Introduction to Microstructure.jl","text":"Signal Simulation for Protocol Design  \nGenerating signals from compartment models using specified imaging protocols and tissue properties is an essential building block of microstructure modeling. This functionality is key for understanding how the data should be collected to improve sensitivity to the tissue properties of interest. We demonstrate this for the task of designing an imaging protocol for estimating axon diameter index with the Cylinder  compartment. \nSee Sensitivity Range of Axon Diameter Index for details.\nTwo-Stage MCMC for Model Fitting  \nEvaluating the quality of fit and the posterior distribution of parameter estimates is key to refining model fitting assumptions. See how we develop a Two-Stage MCMC approach for improving the estimating the axon diameter index in the ex vivo tissue.\nFitting Synthetic Data for Performance Evaluation  \nSynthetic datasets with known ground-truth parameters are essential for evaluating the accuracy and precision of microstructure model estimates for different data acquisition protocols. See the Fitting Evaluation page for demonstration of this process using the two-state MCMC approach for estimating the axon diameter index.\nApplying Literature Models to Public Data  \nWe apply established microstructure models on publicly available datasets. This tutorial demonstrates how to use neural network estimators for WM and GM models and adapt the prior distributions in training datasets. This currently includes:  \nThe SMT model in white matter using HCP data  \nThe SANDI model in gray matter using Connectome 1 open microstructure data","category":"page"},{"location":"guide/0_intro/#Package-overview","page":"Introduction to Microstructure.jl","title":"Package overview","text":"","category":"section"},{"location":"guide/0_intro/","page":"Introduction to Microstructure.jl","title":"Introduction to Microstructure.jl","text":"<embed src=\"../assets/package_demo/Figure1_overview.pdf\" width=\"800px\" height=\"600px\" />","category":"page"},{"location":"guide/0_intro/","page":"Introduction to Microstructure.jl","title":"Introduction to Microstructure.jl","text":"Overview of the main data types (green boxes) and functions (blue boxes) in each module of Microstructure.jl. The direction of the orange arrow between a green and blue box indicates if a certain type is an input or output to the respective function. ","category":"page"},{"location":"guide/#Developer-guide","page":"Developer guide","title":"Developer guide","text":"","category":"section"},{"location":"guide/2_two_stage_MCMC/#guide-mcmc","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"","category":"section"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"After fitting a microstructure model, it is important to assess the quality of the fitting by inspecting the parameter posterior samples and determine if the fitting assumptions should be adjusted to improve fitting quality. We demonstrate this process with a two-stage MCMC fitting method that we developed for estimating axon diameter indices in ex vivo tissue (Gong et al., 2025).  ","category":"page"},{"location":"guide/2_two_stage_MCMC/#Inspecting-quality-of-fitting-and-posterior-samples","page":"Two-stage MCMC","title":"Inspecting quality of fitting and posterior samples","text":"","category":"section"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"For estimating axon diameter index in ex vivo tissue, previous studies have used only the intra-axonal compartment with very few, ultra-high b-values (>=20 ms/𝜇m2 for ex vivo tissue)(Veraart et al., 2020). We use the multi-compartment model ExCaliber, with the additional consideration that a nonnegligible and spatially varying dot signal is present in ex vivo tissue at high b-values and needs to be differentiated from the intra-axonal signals. We therefore model the full signal decay from a range of low and high b-values. The five free parameters in the ExCaliber model are the axon diameter index, the intra-axonal parallel diffusivity, the extra-cellular perpendicular diffusivity, and the intra-axonal and dot signal fraction. Parallel diffusivities in the intra-axonal and extra-cellular space are assumed to be equal to the intrinsic diffusivity. ","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"We first simulate noisy measurements from a typical WM voxel with the ExCaliber model and test protocol:","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"# %% packages used in this demo\nusing Microstructure\nusing Random, Distributions\nusing Plots\nusing LaTeXStrings\nusing Plots.PlotMeasures\n\nfigdir = \"/Users/tgong/Work/Projects/Microstructure.jl/demos/Toolbox/figures/\"\ndpi = 600  # figure resoluton\n\n# make a imaging protocol (you can also read from a *.table file)\nbval = [0, 1000, 2500, 5000, 7500, 11100, 18100, 25000, 43000] .* 1.0e6\nnbval = length(bval)\ntecho = 40.0 .* ones(nbval) .* 1e-3\ntdelta = 15.192 .* ones(nbval) .* 1e-3\ntsmalldel = 11.0 .* ones(nbval) .* 1e-3\nprot = Protocol(bval, techo, tdelta, tsmalldel)\n\n# make a protocol \nbval = [0, 1000, 2500, 5000, 7500, 11100, 18100, 25000, 43000] .* 1.0e6\nnbval = length(bval)\ntecho = 40.0 .* ones(nbval) .* 1e-3\ntdelta = 15.192 .* ones(nbval) .* 1e-3\ntsmalldel = 11.0 .* ones(nbval) .* 1e-3\nprot = Protocol(bval, techo, tdelta, tsmalldel)\n\n# declare a model object and generate signal \nmodel = ExCaliber(;\n    axon=Cylinder(; da=2.0e-6), \n    extra=Zeppelin(; dperp_frac=0.3), \n    fracs=[0.7, 0.15]\n) # ExCaliber(Cylinder(2.0e-6, 6.0e-10, 6.0e-10, 0.0), Zeppelin(6.0e-10, 0.3, 0.0), Iso(0.0, 0.0), [0.7, 0.15])\nsignals = model_signals(model, prot)\n\n# add gaussian noise to simulate noisy measurements\nsigma = 1.0/100.0 # SNR=100 \nmeas = signals .+ rand(Normal(0, sigma), size(signals))\nmeas = meas ./ meas[1]","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"We can them setup the MCMC sampler to estimate model parameters from the measurements","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"# set the tissue parameters you want to estimate in the model; \nparas = (\"axon.da\", \"axon.dpara\", \"extra.dperp_frac\", \"fracs\")\n# set parameter links\nparalinks = (\"axon.d0\" => \"axon.dpara\", \"extra.dpara\" => \"axon.dpara\")\n\n# set the range of priors and proposal distributions\npararange = ((1.0e-7, 1.0e-5), (0.01e-9, 1.2e-9), (0.0, 1.0), (0.0, 1.0))\nproposal = (\n    Normal(0, 0.25e-6), Normal(0, 0.025e-9), Normal(0, 0.05), MvNormal([0.0025 0; 0 0.0001])\n)\n\n# The first sampler samples all parameters defined above\nsampler_full = Sampler(;\n    params=paras,\n    prior_range=pararange,\n    proposal=proposal,\n    paralinks=paralinks,\n    nsamples=70000,\n    burnin=20000,\n    thinning=100,\n)\n\n# The second sampler samples only the first and the fourth parameters while other settings are kept the same as the first sampler\nsampler_sub = subsampler(sampler_full, [1, 4])\n\n# you can combine the two samplers to run a two-stage sampling\nsampler = (sampler_full, sampler_sub)\n\n# setup the noise model the starting point (memory space) for the estimates\ngaussian_noise = Noisemodel()\nestimates = ExCaliber(; axon=Cylinder(; da=5.0e-6))","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"We can now run mcmc! with the two-stage sampler directly, but since we want to inspect the posteriors of each run, we first run only the sampler_full:","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"# do mcmc using only the first sampler\nchain = mcmc!(estimates, meas, prot, sampler_full, gaussian_noise, 1)\n\n# show the estimates after first sampler \n@show estimates","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"chain is the whole mcmc chain while estimates is the model object with estimated parameters. We can now check the fitting curve and posteriors based on these two:","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"\"\"\"\n    get the fraction for each compartment from the vector of fractions\n\"\"\"\nfunction getfrac(fracsvec::Vector{<:Any})\n\n    # fracsvec = chain[\"fracs\"][burnin:thinning:end] or chain[\"fracs\"]\n    fax = [];\n    fdot=[];\n    fex=[]\n    for vec in fracsvec\n        push!(fax, vec[1])\n        push!(fdot, vec[2])\n    end\n    fex = 1 .- fax .- fdot\n    return (fax, fex, fdot)\nend\n\n# get fractions\n(fax, fex, fdot) = getfrac(chain[\"fracs\"])\n\n# %% check the samples from posterior distributions of each parameter and show the estimates as means from the posterior distributions\nburnin = 20000\nthinning = 100\n\nnbin = 20\nfunction histograms(samples, nbins, GT, label=[false false])\n    histogram(samples; normalize=:pdf, bins=nbins, label=label[1], color=:gray)\n    vline!([mean(samples) GT]; label=label[2], lw=2)\nend\n\np1 = histograms(\n    chain[\"axon.da\"][burnin:thinning:end]*1e6, 0:0.5:10, 2.0, [\"samples\", [\"mean\" \"GT\"]]\n)\np2 = histograms(fax[burnin:thinning:end], 0:0.05:1, 0.7)\np3 = histograms(chain[\"axon.dpara\"][burnin:thinning:end]*1e9, 0:0.1:1.2, 0.6)\np4 = histograms(fdot[burnin:thinning:end], 0:0.05:1, 0.15)\np5 = histograms(fex[burnin:thinning:end], 0:0.05:1, 0.15)\np6 = histograms(chain[\"extra.dperp_frac\"][burnin:thinning:end], 0:0.1:1, 0.3)\np7 = histograms(chain[\"sigma\"][burnin:thinning:end], 0:0.005:0.05, 0.01)\n\np8 = histogram(\n    chain[\"logp\"][burnin:thinning:end];\n    normalize=:pdf,\n    bins=10:2:30,\n    label=\"samples\",\n    color=:gray,\n)\nvline!([mean(chain[\"logp\"][burnin:thinning:end])]; label=\"mean\", lw=2)\n\ntitles =\n    [L\"d_{a} [{\\mu}m]\" L\"f_{ia}\" L\"D_{\\parallel}^{ia} [ms/{{\\mu}m}^2]\" L\"f_{dot}\" L\"f_{ec}\" L\"D_{\\perp}^{ec} to D_{\\parallel}^{ia} fraction\" L\"sigma\" L\"log(p)\"]\nplot(\n    p1,\n    p2,\n    p3,\n    p4,\n    p5,\n    p6,\n    p7,\n    p8;\n    layout=(2, 4),\n    titles=titles,\n    left_margin=5mm,\n    bottom_margin=5mm,\n    xguidefontsize=10,\n    size=(1200, 400),\n    dpi=dpi,\n)\nsavefig(figdir * \"/2_samples_mcmc_stage1\")\n\n# %% get predicted signals and compare to the measurements \npred = model_signals(estimates, prot)\nbvals = bval * 1e-9\nblabel = bval[1:2:end] * 1e-9\n# assess goodness of fit\nplot(\n    bvals,\n    pred;\n    label=\"predictions\",\n    lc=:black,\n    lw=2,\n    xticks=blabel,\n    size=(600, 400),\n    dpi=dpi,\n)\nscatter!(bvals, meas; label=\"measurements\", mc=:red, ms=4, ma=0.5)\ntitle!(\"Goodness of fit\")\nxlabel!(L\"b\\ [ms/{{\\mu}m}^2]\")\nylabel!(\"Normalized signal\")\nsavefig(figdir * \"/2_curves_mcmc_stage1\")","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"Now we run the second MCMC sampler sampler_sub while keeping the diffusivity parameters fixed ","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"chain2 = mcmc!(estimates, meas, prot, sampler_sub, gaussian_noise, 1)\n@show estimates","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"As above, we use chain2 and updated estimates to inspect the quality of fitting and posterior samples","category":"page"},{"location":"guide/2_two_stage_MCMC/#Results","page":"Two-stage MCMC","title":"Results","text":"","category":"section"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"In the first stage, where all five tissue parameters are sampled, we find high uncertainty of estimated intra-axonal fractions. By fixing the parallel diffusivity and extra-cellular perpendicular diffusivity to their posterior means and sampling only the distributions of other 3 tissue parameters, the second MCMC run achieves similar likelihood of measurements, but lower parameter uncertainty and higher accuracy for the axon diameter index and compartment signal fractions.","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"<embed src=\"../assets/package_demo/Figure5_MCMC.pdf\" width=\"800px\" height=\"400px\" />","category":"page"},{"location":"guide/2_two_stage_MCMC/#References","page":"Two-stage MCMC","title":"References","text":"","category":"section"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"Gong, T., Maffei, C., Dann, E., Lee, H.-H., Lee, H., Augustinack, J.C., Huang, S.Y., Haber, S.N., Yendiki, A., 2025. Interplay between MRI-based axon diameter and myelination estimates in macaque and human brain. Imaging Neuroscience. https://doi.org/10.1162/IMAGA00576","category":"page"},{"location":"guide/2_two_stage_MCMC/","page":"Two-stage MCMC","title":"Two-stage MCMC","text":"Veraart, J., Nunes, D., Rudrapatna, U., Fieremans, E., Jones, D.K., Novikov, D.S., Shemesh, N., 2020. Noninvasive quantification of axon radii using diffusion MRI. Elife 9. https://doi.org/10.7554/eLife.49855","category":"page"},{"location":"manual/estimators/#Estimators","page":"Estimators","title":"Estimators","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"This page introduces two types of estimators in Microstructure.jl for estimating parameters and quantifying uncertainties: the Markov Chain Monte Carlo (MCMC) sampling method and Monte Carlo dropout using neural networks. These two types of estimators are flexibly parametrized, allowing you to specify sampling options for MCMC and training options for neural networks. ","category":"page"},{"location":"manual/estimators/#MCMC","page":"Estimators","title":"MCMC","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"MCMC methods aim to generate independent samples from the posterior distributions of tissue parameters given certain MRI measurements. You will need to tune the sampler parameters for a specific biophysical model.","category":"page"},{"location":"manual/estimators/#Define-a-sampler-for-your-model","page":"Estimators","title":"Define a sampler for your model","text":"","category":"section"},{"location":"manual/estimators/#Microstructure.Sampler","page":"Estimators","title":"Microstructure.Sampler","text":"Sampler(\n    params::Tuple{Vararg{String}},\n    prior_range::Tuple{Vararg{Tuple{Float64, Float64}}}, \n    proposal::Tuple{Vararg{<:Any}},\n    paralinks::Tuple{Vararg{Pair{String}}}, \n    nsamples::Int64 \n    burnin::Int64\n    thinning::Int64 \n)\n\nReturn a Sampler Type object for a biophysical model.\n\nExamples\n\njulia>Sampler(\n    params = (\"axon.da\",\"axon.dpara\",\"extra.dperp_frac\",\"fracs\"),\n    prior_range = ((1.0e-7,1.0e-5),(0.01e-9,0.9e-9),(0.0, 1.0),(0.0,1.0)),\n    proposal = (Normal(0,0.25e-6), Normal(0,0.025e-9), Normal(0,0.05), MvNormal([0.0025 0 0;0 0.0001 0; 0 0 0.0001])),\n    paralinks = (\"axon.d0\" => \"axon.dpara\", \"extra.dpara\" => \"axon.dpara\"),\n    nsamples = 70000,\n    burnin = 20000\n)\nSampler((\"axon.da\", \"axon.dpara\", \"extra.dperp_frac\", \"fracs\"), ((1.0e-7, 1.0e-5), (1.0e-11, 9.0e-10), (0.0, 1.0), (0.0, 1.0)), (Normal{Float64}(μ=0.0, σ=2.5e-7), Normal{Float64}(μ=0.0, σ=2.5e-11), Normal{Float64}(μ=0.0, σ=0.05), ZeroMeanFullNormal(\ndim: 3\nμ: Zeros(3)\nΣ: [0.0025 0.0 0.0; 0.0 0.0001 0.0; 0.0 0.0 0.0001]\n)\n), (\"axon.d0\" => \"axon.dpara\", \"extra.dpara\" => \"axon.dpara\"), 70000, 20000, 1)\n\n\n\n\n\n","category":"type"},{"location":"manual/estimators/#Define-a-noise-model","page":"Estimators","title":"Define a noise model","text":"","category":"section"},{"location":"manual/estimators/#Microstructure.Noisemodel","page":"Estimators","title":"Microstructure.Noisemodel","text":"Noisemodel(logpdf::Function, \nsigma_start::Float64, \nsigma_range::Tuple{Float64,Float64}, \nproposal::Distribution)\n\nReturn a Noisemodel object with logpdf Function to calculate log likelihood of measurements (set this between logp_gauss and logp_rician),  sigma_start as the starting value of noise level, sigma_range as prior range and proposal distribution for MCMC sampling.\n\nExamples\n\njulia> Noisemodel()\nNoisemodel(Microstructure.logp_gauss, 0.01, (0.005, 0.1), Distributions.Normal{Float64}(μ=0.0, σ=0.005))\n\njulia> Noisemodel(logpdf = logp_rician, sigma_start = 0.02, proposal = Normal(0,0.001))\nNoisemodel(Microstructure.logp_rician, 0.02, (0.005, 0.1), Normal{Float64}(μ=0.0, σ=0.001))\n\n\n\n\n\n","category":"type"},{"location":"manual/estimators/#Run-MCMC-on-your-model-and-data","page":"Estimators","title":"Run MCMC on your model and data","text":"","category":"section"},{"location":"manual/estimators/#Microstructure.mcmc!","page":"Estimators","title":"Microstructure.mcmc!","text":"Method 1 generates pertubations within function, creates and returns a dict chain, and modify final model estimates in place. This method is useful in checking a few voxels, e.g. for quality of fitting, chain dignostics and optimizing sampler for models. \n\nmcmc!(\n    estimates::BiophysicalModel,\n    meas::Vector{Float64},\n    protocol::Protocol,\n    sampler::Sampler,\n    noise::Noisemodel = Noisemodel(),\n    rng::Int64 = 1\n)\n\njulia> chain = mcmc!(estimates, measurements, protocol, sampler, noise_model, rng)\n\nMethod 2 takes chain and pertubations as input, mutating chain in place which can be used to calculate finial estimates and uncertainties.  This method is used for processing larger dataset, e.g. for whole-barin/slices.  This method is used together with multi-threads processing that pre-allocate spaces for caching chains, avoiding creating them for each voxel.  This method also reuses pertubations for faster computation speed; we usually use very large numbers of pertubations (e.g. ~10^4) to densely sample the proposal distributions. \n\nmcmc!(\n    chain::Vector{Any},\n    estimates::BiophysicalModel,\n    meas::Vector{Float64},\n    protocol::Protocol,\n    sampler::Sampler,\n    pertubations::Vector{Vector{Any}},\n    noise::Noisemodel = Noisemodel()\n)\n\njulia> mcmc!(chain, estimates, meas, protocol, sampler, pertubations, noise_model))\n\nReferences\n\nFor using MCMC in microsturcture imaging, here are some recommended references:\n\nBehrens, T.E.J., Woolrich, M.W., Jenkinson, M., Johansen-Berg, H., Nunes, R.G., Clare, S., Matthews, P.M., Brady, J.M., Smith, S.M., 2003. Characterization and Propagation of Uncertainty in Diffusion-Weighted MR Imaging. Magn Reson Med 50, 1077–1088. https://doi.org/10.1002/MRM.10609\n\nAlexander, D.C., 2008. A General Framework for Experiment Design in Diffusion MRI and Its Application in Measuring Direct Tissue-Microstructure Features. Magn Reson Med 60, 439–448. https://doi.org/10.1002/mrm.21646\n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"Function mcmc! runs on single thread and suitable for testing sampler parameters and inspecting chains for small dataset. After optimizing sampler parameters, if you are processing datasets with many voxels, use the threading function for multi-threads processing. Refer to multi-threads page for more details.","category":"page"},{"location":"manual/estimators/#Neural-Networks","page":"Estimators","title":"Neural Networks","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"This module currently includes simple multi-layer perceptrons and training data generation function, which allows supervised training of the MLPs on synthesised data with given training parameter distributions. ","category":"page"},{"location":"manual/estimators/#1.-Specify-a-network-model-for-your-task","page":"Estimators","title":"1. Specify a network model for your task","text":"","category":"section"},{"location":"manual/estimators/#Microstructure.NetworkArg","page":"Estimators","title":"Microstructure.NetworkArg","text":"NetworkArg(\n    model::BiophysicalModel\n    protocol::Protocol\n    params::Tuple{Vararg{String}}\n    prior_range::Tuple{Vararg{Tuple{Float64,Float64}}} # range for priors \n    prior_dist::Tuple{Vararg{<:Any}}\n    paralinks::Tuple{Vararg{Pair{String,<:String}}} = ()\n    noise_type::String = \"Gaussian\" # \"Rician\"    \n    sigma_range::Tuple{Float64, Float64}\n    sigma_dist::Distribution\n    nsamples::Int64\n    nin::Int64\n    nout::Int64\n    hidden_layers::Tuple{Vararg{Int64}}\n    dropoutp::Union{<:AbstractFloat, Tuple{Vararg{<:AbstractFloat}}}\n    actf::Function\n)\n\nReturn a NetworkArg object with necessary parameters to construct a neural network model  and generate training samples for specifc biophysical model. A test network architecture and training samples can be automaticlly determined from the modelling task by using function\n\nNetworkArg(model, protocol, params, prior_range, prior_dist, paralinks, noisetype, sigma_range, sigma_dist)\n\n\n\n\n\n","category":"type"},{"location":"manual/estimators/#2.-Specify-training-parameters","page":"Estimators","title":"2. Specify training parameters","text":"","category":"section"},{"location":"manual/estimators/#Microstructure.TrainingArg","page":"Estimators","title":"Microstructure.TrainingArg","text":"TrainingArg(\n    batchsize::Int64 \n    lossf::Function\n    lr::Float64\n    epoch::Int64\n    tv_split::Float64\n    patience::Tuple{Int64,Int64} \n    device::Function\n)\n\nReturn TrainingArg Type object with fields related to how network will be trained. batch size; loss function; learning rate; number of epoches; validation/training data split; patience for train loss plateau, patience for validation loss to increase.  Patiences are currently not applied when training and validating on generated training samples from uniform parameter distributions,  therefore training will stop when reaching the number of epoches.  The patience parameter will be considered in the future when training with real data or generated data with other distributions. \n\n\n\n\n\n","category":"type"},{"location":"manual/estimators/#3.-Train-a-network-with-specified-network-and-training-parameters","page":"Estimators","title":"3. Train a network with specified network and training parameters","text":"","category":"section"},{"location":"manual/estimators/#Microstructure.training","page":"Estimators","title":"Microstructure.training","text":"training(\n    arg::TrainingArg, \n    net::NetworkArg, \n    rng_seed::Int\n)\n\nTrain and return a trained mlp model, a Dict of training logs with train loss, training data loss and validation data loss for each epoch, and the inputs and labels (training data) the mlp was trained on. This function allows for both cpu and gpu training.\n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/#4.-Apply-trained-model-to-your-test-data","page":"Estimators","title":"4. Apply trained model to your test data","text":"","category":"section"},{"location":"manual/estimators/#Microstructure.test","page":"Estimators","title":"Microstructure.test","text":"test(mlp::Chain, data::Array{<:AbstractFloat,2}, ntest)\n\nReturn probabilistic estimates by applying a trained mlp to test data for ntest times with dropout layers on.\n\ntest(mlp::Chain, data::Array{<:AbstractFloat,2})\n\nGet deterministic estimates with dropout layers off\n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/#Other-useful-functions","page":"Estimators","title":"Other useful functions","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"Generate task specific MLP and training samples:","category":"page"},{"location":"manual/estimators/#Microstructure.create_mlp","page":"Estimators","title":"Microstructure.create_mlp","text":"create_mlp(\n    ninput::Int, \n    noutput::Int, \n    hiddenlayers::Tuple{Vararg{Int}}, \n    dropoutp::Union{<:AbstractFloat,Tuple{Vararg{<:AbstractFloat}}}\n    )\n\nReturn a mlp with ninput/noutput as the number of input/output channels, and number of units in each layer specified in hiddenlayers;  'dropoutp' contains the dropout probalibities for dropout layers; it can be a single value (one dropout layer before output) or same length as the hidden layers \n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/#Microstructure.generate_samples","page":"Estimators","title":"Microstructure.generate_samples","text":"generate_samples(\n    model::BiophysicalModel,\n    protocol::Protocol,\n    params::Tuple{Vararg{String}},\n    prior_range::Tuple{Vararg{Tuple{Float64,Float64}}}, \n    prior_dist::Tuple{Vararg{<:Any}},\n    nsample::Int,\n    paralinks::Union{Pair{String},Tuple{Vararg{Pair{String}}}},\n    sigma_range::Tuple{Float64, Float64},\n    sigma::Distribution,\n    noise_type::String=\"Gaussian\",\n    rng_seed,\n)\n\nGenerate and return training samples for a model using given priors of tissue parameters  and specified noise model (\"Gaussian\" or \"Rician\") and noise level.\n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"Training on given model and training samples","category":"page"},{"location":"manual/estimators/#Microstructure.train_loop!","page":"Estimators","title":"Microstructure.train_loop!","text":"train_loop!(\n    mlp::Chain, \n    arg::TrainingArg, \n    inputs::Array{Float64,2}, \n    labels::Array{Float64,2}\n)\n\nTrain and update the mlp and return a Dict of training logs with train loss, training data loss and validation data loss for each epoch. This function works on cpu, which is sufficiently fast for most cases.\n\n\n\n\n\n","category":"function"},{"location":"manual/multithreads/#Multi-threads","page":"Multi threads","title":"Multi threads","text":"","category":"section"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"Multi-threads processing is recommended when using MCMC estimation. The neural network estimators are relatively fast and take only minutes training on CPU. ","category":"page"},{"location":"manual/multithreads/#Start-julia-in-terminal-with-multi-threads","page":"Multi threads","title":"Start julia in terminal with multi-threads","text":"","category":"section"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"~ % julia --threads auto","category":"page"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"You can also set enviornment variable by adding export JULIA_NUM_THREADS=auto in your bash profile, which will use multi-threads automatically when you start julia.","category":"page"},{"location":"manual/multithreads/#Multi-threads-for-MCMC-estimation","page":"Multi threads","title":"Multi-threads for MCMC estimation","text":"","category":"section"},{"location":"manual/multithreads/#Microstructure.threading","page":"Multi threads","title":"Microstructure.threading","text":"This method runs multi-threads MCMC estimation on dMRI data using a specified biophysical model, calls the voxel threading  method and save estimated parameters as nifti files. savedir includes both output path and file name prefix. Two-stage MCMC sampling methods are run if provided sampler is a Tuple of two samplers, where it will sample all the unknown parameters  using the first sampler then sample target tissue parameters in the second sampler while fixing the rest parameters to posterior means in the first MCMC.  \n\nthreading(\n    model_start::BiophysicalModel,\n    sampler::Union{Sampler,Tuple{Sampler,Sampler}},\n    dmri::MRI,\n    mask::MRI,\n    protocol::Protocol,\n    noise_model::Noisemodel,\n    savedir::String,\n)\n\nMethods that return mean and standard deviation of estimations from measurements array of size [Nmeas, Nvoxels] using single-stage or two-stage MCMC.\n\nthreading(\n    model_start::BiophysicalModel,\n    sampler::Sampler,\n    measurements::Array{Float64,2},\n    protocol::Protocol,\n    noise_model::Noisemodel,\n)\n\n\nthreading(\n    model_start::BiophysicalModel,\n    sampler::Tuple{Sampler,Sampler},\n    measurements::Array{Float64,2},\n    protocol::Protocol,\n    noise_model::Noisemodel,\n)\n\n\n\n\n\n","category":"function"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"Function threading calls pre_allocate and mcmc! for multi-threads processing. When provided sampler is a Tuple containing two Samplers, it uses a two-stage MCMC to get final estimates.","category":"page"},{"location":"manual/multithreads/#Microstructure.pre_allocate","page":"Multi threads","title":"Microstructure.pre_allocate","text":"pre_allocate(\n    model::BiophysicalModel, sampler::Sampler, datasize::Tuple{Int64,Int64}\n)\n\npre_allocate(\n    model::BiophysicalModel, sampler::Tuple{Sampler,Sampler}, datasize::Tuple{Int64,Int64}\n)\n\nAllocating spaces for caching computing results based on model, sampler and datasize. datasize is the size of data (Nmeas, Nvoxels) \n\n\n\n\n\n","category":"function"},{"location":"tutorials/3_data_generation/#How-to-generate-training-datasets","page":"How to generate training datasets","title":"How to generate training datasets","text":"","category":"section"},{"location":"tutorials/3_data_generation/","page":"How to generate training datasets","title":"How to generate training datasets","text":"Constructing...","category":"page"},{"location":"tutorials/3_data_generation/","page":"How to generate training datasets","title":"How to generate training datasets","text":"Also checkout Manual - Estimators ","category":"page"},{"location":"getting_started/#Minimal-steps","page":"Getting started","title":"Minimal steps","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Here includes the minimal steps for you to get started with your MRI dataset. Visit tutorial and manual pages for more feature demonstrations. ","category":"page"},{"location":"getting_started/#Start-julia-in-terminal-with-multi-threads","page":"Getting started","title":"Start julia in terminal with multi-threads","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"~ % julia --threads auto","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"You can also set enviornment variable by adding export JULIA_NUM_THREADS=auto in your bash profile, which will use multi-threads automatically when you start julia.","category":"page"},{"location":"getting_started/#Load-the-package-in-Julia","page":"Getting started","title":"Load the package in Julia","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"In your julia script or REPL:","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> using Microstructure","category":"page"},{"location":"getting_started/#Read-dMRI-data-and-perform-spherical-mean","page":"Getting started","title":"Read dMRI data and perform spherical mean","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Provide full path to the DWI file and acquisition files with following extensions: dwiname.bvals (.bval), dwiname.bvecs (.bvec), dwiname.techo, dwiname.tdelta and dwiname.tsmalldel. Provide all or a subset of the acquisition files depending on the data and model you use. ","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> (dMRI, protocol) = spherical_mean(\n                            joinpath(datadir, \"dwiname.nii.gz\"), \n                            save=true, \n                            joinpath(datadir, \"dwiname.bvals\"), \n                            joinpath(datadir, \"dwiname.bvecs\"), \n                            joinpath(datadir, \"dwiname.techo\"), \n                            joinpath(datadir, \"dwiname.tdelta\"), \n                            joinpath(datadir, \"dwiname.tsmalldel\")\n                            )","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"You might also need to read a tissue mask to define the region you want to process:","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> using Fibers\njulia> mask = mri_read(joinpath(datadir, \"mask.nii.gz\"))","category":"page"},{"location":"getting_started/#Specify-the-model-we-want-to-use-and-get-a-MCMC-sampler-for-it","page":"Getting started","title":"Specify the model we want to use and get a MCMC sampler for it","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Here, we use a multi-echo spherical mean model which is curently under testing as an example:","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> model_start = MTE_SMT(axon = Stick(dpara = 1.7e-9, t2 = 90e-3), extra = Zeppelin(dpara = 1.7e-9, t2 = 60e-3))\njulia> nsample, burnin, thinning = 20000, 1000, 100\njulia> sampler_smt = Sampler(model_start, nsample, burnin, thinning)","category":"page"},{"location":"getting_started/#MCMC-Estimation","page":"Getting started","title":"MCMC Estimation","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> savename = joinpath(datadir, \"mte_smt.\")\njulia> threading(model_start, sampler_smt, dMRI, mask, protocol, Noisemodel(), savename)","category":"page"},{"location":"manual/compartments/#Tissue-Compartments","page":"Tissue Compartments","title":"Tissue Compartments","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"This page introduces Compartment types with fields of relevant tissue parameters and forward functions inferencing signals from the compartment model and imaging protocol. Featuring spherical mean based models with compartmental relaxation-weighting.","category":"page"},{"location":"manual/compartments/#Overview","page":"Tissue Compartments","title":"Overview","text":"","category":"section"},{"location":"manual/compartments/#Microstructure.Compartment","page":"Tissue Compartments","title":"Microstructure.Compartment","text":"Compartment Type is an abstract type that includes the Cylinder, Stick, Zeppelin, Sphere and Iso type.  A Compartment Type object contains relevant tissue parameters that affect the MRI signals. Each type of compartment contain a t2 field for combined-diffusion-T2 imaging.  When your data supports only T2-weighted compartment modelling, i.e. acquired with single-TE,  set the t2 field to zero for conventional dMRI modelling. \n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#Axonal-and-dendritic-compartments","page":"Tissue Compartments","title":"Axonal and dendritic compartments","text":"","category":"section"},{"location":"manual/compartments/#Microstructure.Cylinder","page":"Tissue Compartments","title":"Microstructure.Cylinder","text":"Cylinder(\n    da::Float64, \n    dpara::Float64, \n    d0::Float64, \n    t2::Float64\n    )\n\nReturn a Cylinder Type object with the cylinder diameter da, parallel diffusivity dpara,  the intrinsic diffusivity d0 and the T2 relaxation time t2. \n\nExamples\n\njulia> Cylinder(da = 3.0e-6, dpara = 1.8e-9, d0 = 1.7e-9, t2 = 90e-3)\nCylinder(3.0e-6, 1.8e-9, 1.7e-9, 0.09)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#Microstructure.Stick","page":"Tissue Compartments","title":"Microstructure.Stick","text":"Stick(dpara::Float64, t2::Float64)\n\nReturn a Stick Type object with parallel diffusivity dpara and T2 relaxation time t2.  The perpendicular diffusivity of a Stick model is zero. \n\nExamples\n\njulia> Stick(dpara = 1.7e-6, t2 = 60e-3)\nStick(1.7e-6, 0.06)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#Extra-cellular-compartment","page":"Tissue Compartments","title":"Extra-cellular compartment","text":"","category":"section"},{"location":"manual/compartments/#Microstructure.Zeppelin","page":"Tissue Compartments","title":"Microstructure.Zeppelin","text":"Zeppelin(\n    dpara::Float64, \n    dperp_frac::Float64, \n    t2::Float64\n    )\n\nReturn a Zeppelin Type object with parallel diffusivity dpara, axially symmetric  perpendicular diffusivity represented as a fraction of the parallel diffusivity dperp_frac, and the T2 relaxation time t2.\n\nExamples\n\njulia> Zeppelin(dpara = 1.7e-6, dperp_frac = 0.5, t2 = 0.0)\nZeppelin(1.7e-6, 0.5, 0.0)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#Cell-body-compartment","page":"Tissue Compartments","title":"Cell body compartment","text":"","category":"section"},{"location":"manual/compartments/#Microstructure.Sphere","page":"Tissue Compartments","title":"Microstructure.Sphere","text":"Sphere(\n    diff::Float64, \n    size::Float64, \n    t2::Float64\n    )\n\nReturn a Sphere Type object with diffusivity within sphere diff, spherical radius size, and T2 relaxation time t2.\n\nExamples\n\njulia> Sphere(diff = 3.0e-9, size = 8.0e-6, t2 = 45e-3)\nSphere(3.0e-9, 8.0e-6, 0.045)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#CSF-and-dot-compartment","page":"Tissue Compartments","title":"CSF and dot compartment","text":"","category":"section"},{"location":"manual/compartments/#Microstructure.Iso","page":"Tissue Compartments","title":"Microstructure.Iso","text":"Iso(diff::Float64, t2=Float64)\n\nReturn an isotropic tensor with diffusivity diff and T2 relaxation time t2.  This compartment can be used to represent CSF (diff = free water) or dot compartment (diff = 0).  The latter is for immobile water typically seen in ex vivo tissue.  This compartment can also represent an isotropic extra-cellular environment with diffusivity diff slower than free water.\n\nExamples\n\njulia> Iso(diff = 3.0e-9,t2 = 2000.0e-3)\nIso(3.0e-9, 2.0)\n\njulia> Iso(diff = 0.0)\nIso(0.0, 0.0)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#Compartment-signals","page":"Tissue Compartments","title":"Compartment signals","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"This function implements different methods for different compartment Types to generate compartment signals.","category":"page"},{"location":"manual/compartments/#Microstructure.compartment_signals","page":"Tissue Compartments","title":"Microstructure.compartment_signals","text":"compartment_signals(model::Compartment,protocol::Protocol)\n\nReturn compartment signals given a compartment object model and a imaging protocol.  model can be the Cylinder/Zeppelin/Stick/Sphere/Iso Type. When t2 in compartment model is set as default (0),  relaxation-weightings are not considered in the signal equation.\n\nReferences\n\nIf you use these compartments to build models, please cite the recommended references. \n\nFor using any compartment in current release, please cite the following references for expressions of spherical mean/power averaging:\n\nCallaghan, P.T., Jolley, K.W., Lelievre, J., 1979. Diffusion of water in the endosperm tissue of wheat grains as studied by pulsed field gradient nuclear magnetic resonance. Biophys J 28, 133. https://doi.org/10.1016/S0006-3495(79)85164-4\n\nKroenke, C.D., Ackerman, J.J.H., Yablonskiy, D.A., 2004. On the nature of the NAA diffusion attenuated MR signal in the central nervous system. Magn Reson Med 52, 1052–1059. https://doi.org/10.1002/MRM.20260\n\nKaden, E., Kruggel, F., Alexander, D.C., 2016. Quantitative mapping of the per-axon diffusion coefficients in brain white matter. Magn Reson Med 75, 1752–1763. https://doi.org/10.1002/MRM.25734\n\nConsider the following reference for overview of all tissue compartments:\n\nPanagiotaki, E., Schneider, T., Siow, B., Hall, M.G., Lythgoe, M.F., Alexander, D.C., 2012. Compartment models of the diffusion MR signal in brain white matter: A taxonomy and comparison. Neuroimage 59, 2241–2254. \n\nCylinder compartment:\n\nVan Gelderen, P., Des Pres, D., Van Zijl, P.C.M., Moonen, C.T.W., 1994. Evaluation of Restricted Diffusion in Cylinders. Phosphocreatine in Rabbit Leg Muscle. J Magn Reson B 103, 255–260. https://doi.org/10.1006/JMRB.1994.1038\n\nAlexander, D.C., Hubbard, P.L., Hall, M.G., Moore, E.A., Ptito, M., Parker, G.J.M., Dyrby, T.B., 2010. Orientationally invariant indices of axon diameter and density from diffusion MRI. Neuroimage 52, 1374–1389. https://doi.org/10.1016/j.neuroimage.2010.05.043\n\nFan, Q., Nummenmaa, A., Witzel, T., Ohringer, N., Tian, Q., Setsompop, K., Klawiter, E.C., Rosen, B.R., Wald, L.L., Huang, S.Y., 2020. Axon diameter index estimation independent of fiber orientation distribution using high-gradient diffusion MRI. Neuroimage 222. \n\nAndersson, M., Pizzolato, M., Kjer, H.M., Skodborg, K.F., Lundell, H., Dyrby, T.B., 2022. Does powder averaging remove dispersion bias in diffusion MRI diameter estimates within real 3D axonal architectures? Neuroimage 248. \n\nSphere compartment:\n\nNeuman, C.H., 1974. Spin echo of spins diffusing in a bounded medium. J Chem Phys 4508–4511. https://doi.org/10.1063/1.1680931\n\nBalinov, B., Jönsson, B., Linse, P., Söderman, O., 1993. The NMR Self-Diffusion Method Applied to Restricted Diffusion. Simulation of Echo Attenuation from Molecules in Spheres and between Planes. J Magn Reson A 104, 17–25. https://doi.org/10.1006/JMRA.1993.1184\n\nStick compartment:\n\nBehrens, T.E.J., Woolrich, M.W., Jenkinson, M., Johansen-Berg, H., Nunes, R.G., Clare, S., Matthews, P.M., Brady, J.M., Smith, S.M., 2003. Characterization and Propagation of Uncertainty in Diffusion-Weighted MR Imaging. Magn Reson Med 50, 1077–1088. https://doi.org/10.1002/MRM.10609\n\nPanagiotaki, E., Schneider, T., Siow, B., Hall, M.G., Lythgoe, M.F., Alexander, D.C., 2012. Compartment models of the diffusion MR signal in brain white matter: A taxonomy and comparison. Neuroimage 59, 2241–2254. \n\nZhang, H., Schneider, T., Wheeler-Kingshott, C.A., Alexander, D.C., 2012. NODDI: Practical in vivo neurite orientation dispersion and density imaging of the human brain. Neuroimage 61, 1000–1016. https://doi.org/10.1016/j.neuroimage.2012.03.072\n\nZeppelin & Iso:\n\nAlexander, D.C., 2008. A General Framework for Experiment Design in Diffusion MRI and Its Application in Measuring Direct Tissue-Microstructure Features. Magn Reson Med 60, 439–448. https://doi.org/10.1002/mrm.21646\n\nPanagiotaki, E., Schneider, T., Siow, B., Hall, M.G., Lythgoe, M.F., Alexander, D.C., 2012. Compartment models of the diffusion MR signal in brain white matter: A taxonomy and comparison. Neuroimage 59, 2241–2254. \n\nZhang, H., Schneider, T., Wheeler-Kingshott, C.A., Alexander, D.C., 2012. NODDI: Practical in vivo neurite orientation dispersion and density imaging of the human brain. Neuroimage 61, 1000–1016. https://doi.org/10.1016/j.neuroimage.2012.03.072\n\nCompartmental T2-weighting:\n\nVeraart, J., Novikov, D.S., Fieremans, E., 2017. TE dependent Diffusion Imaging (TEdDI) distinguishes between compartmental T 2 relaxation times. https://doi.org/10.1016/j.neuroimage.2017.09.030\n\nLampinen, B., Szczepankiewicz, F., Novén, M., van Westen, D., Hansson, O., Englund, E., Mårtensson, J., Westin, C.F., Nilsson, M., 2019. Searching for the neurite density with diffusion MRI: Challenges for biophysical modeling. Hum Brain Mapp 40, 2529–2545. https://doi.org/10.1002/hbm.24542\n\nGong, T., Tong, Q., He, H., Sun, Y., Zhong, J., Zhang, H., 2020. MTE-NODDI: Multi-TE NODDI for disentangling non-T2-weighted signal fractions from compartment-specific T2 relaxation times. Neuroimage 217. https://doi.org/10.1016/j.neuroimage.2020.116906\n\nGong, T., Tax, C.M., Mancini, M., Jones, D.K., Zhang, H., Palombo, M., 2023. Multi-TE SANDI: Quantifying compartmental T2 relaxation times in the grey matter. Toronto.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/4_noise_propagation/#How-to-evaluate-accuracy-and-precision","page":"How to evaluate accuracy and precision","title":"How to evaluate accuracy and precision","text":"","category":"section"},{"location":"tutorials/4_noise_propagation/","page":"How to evaluate accuracy and precision","title":"How to evaluate accuracy and precision","text":"Constructing...","category":"page"},{"location":"guide/4_smt/#guide-smt","page":"SMT","title":"SMT","text":"","category":"section"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"For a neural network estimator, the prior distribution of tissue parameters used for training the model will affect the posterior distributions of parameter estimates. Ideally an uninformative prior such as those used in the MCMC sampler will ensure that the estimates are less biased by prior knowledge and thus truly reflect biological properties. However, due to practical difficulties in parameter estimation, e.g., with limited data and low SNR, previous studies have used strategies such as fixing certain parameters and using narrower priors to increase the robustness of estimates. The Microstructure.jl package is designed to investigate these strategies flexibly, as the parameters to estimate in a model and the prior ranges and prior distributions are input arguments for training MLP models. It generates fitting evaluations for a fitting strategy given the protocol and SNR level in the data.  ","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"This tutorial uses the SMT model (Kaden et al., 2016) for demonstration.","category":"page"},{"location":"guide/4_smt/#Datasets","page":"SMT","title":"Datasets","text":"","category":"section"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"We used the minimally preprocessed datasets from the WashU/UMinn young adult Human Connectome Project (HCP) (Glasser et al., 2013; Van Essen et al., 2012) to demonstrate the fitting of a Stick-Zeppelin model appropriate for WM with the SMT. The HCP data were acquired at a 1.25 mm isotropic resolution with diffusion weightings of b=1000, 2000, and 3000 smm^2, 90 directions per shell and 18 b=0 s/mm2 images interspersed uniformly between the DWIs, resulting in a total of 288 measurements. We used datasets from 6 subjects for evaluating the variation of estimates. ","category":"page"},{"location":"guide/4_smt/#Experiments","page":"SMT","title":"Experiments","text":"","category":"section"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"The SMT model with single TE data is characterized by the intra-axonal signal fraction f_ia, intra-axonal parallel diffusivity D_^ia, extra-cellular parallel diffusivity D_^ec and extra-cellular perpendicular diffusivity D_^ec. This two-compartment SMT model (Kaden et al., 2016) originally assumed D_^ec=D_^ia=D_  and linked D_^ec through a model of tortuosity as D_^ec = (1- f_ia) D_^ec, thus reduced the model parameters to f_ia and D_. Here, we removed the tortuosity assumption and estimated f_ia, D_  and D_^ec from all three b-shells of the HCP data; D_^ec was represented as D_^ec = D_ multiplied by a fraction between [0, 1]. ","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"We generated 30,000 training samples with tissue parameters sampled from prior ranges of [0, 1] for f_ia and the D_^ec  D_ fraction, and [1, 3] 𝜇m^2ms for D_. We used uniform distributions for sampling the f_ia and the D_^ec  D_ fraction. We tested both a uniform and a more informative Gaussian distribution for the D_, with a mean value of 2 𝜇m^2ms that is appropriate for WM tissue. We generated signals for the training samples using the forward model and the HCP imaging protocol and added Gaussian noise to the signals to generate noisy measurements.  ","category":"page"},{"location":"guide/4_smt/#Code-example","page":"SMT","title":"Code example","text":"","category":"section"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"The following code trains network on synthetic data with HCP protocol. We can visualize the training log before further evaluation of parameters:","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"using Fibers, Microstructure\nusing Distributions, Random\nusing Plots\nusing Flux\n\n# include utility functions for plotting\nsrcpath = dirname(pathof(Microstructure))\ninclude(joinpath(srcpath, \"../utils/utils.jl\"))\n\n# set the path to save generated figures\nfigdir = \"/Users/tgong/Work/Projects/Microstructure.jl/demos/Toolbox/figures/\"\ndpi = 600  # figure resoluton\ninfo = \"gaussian\" # used in file name for saving; the case of using Gaussian prior\n\n# %% read the data acquistion protocol to generate training data\ndatadir = \"/Users/tgong/Work/Database/HCP/905147\"\nprotocol = Protocol(joinpath(datadir, \"diravg_norm.btable\"))\n\n### Setup model and nn estimator\n# t2 is set to default as 0, so single-TE model will be used\nmodel = MTE_SMT( \n    axon = Stick(dpara = 2.0e-9, t2 = 0.0),\n    extra = Zeppelin(dpara = 2.0e-9, dperp_frac = 0.5, t2 = 0.0),\n    fracs = 0.5,\n    )\n\n# parameters to estimate\nparams = (\"fracs\", \"axon.dpara\", \"extra.dperp_frac\")\nprior_range = ((0.0, 1.0), (1.0e-9, 3.0e-9), (0.0, 1.0))\n\n# Gaussian prior for \"axon.dpara\"\nprior_dist = (nothing, Normal(2.0e-9, 0.3e-9), nothing)\n\nparalinks = (\"extra.dpara\" => \"axon.dpara\")\n\n# The level of the noise\nnoise_type = \"Gaussian\"\nsigma_range = (0.002, 0.02)\nsigma_dist = Normal(0.01, 0.002)\n\nnsamples = 30000\nnin = 4\nnout = 3\nhidden_layers = (32, 32, 32)\ndropoutp = (0.1, 0.1, 0.1)\n\nnetarg = NetworkArg(\n    model,\n    protocol,\n    params,\n    prior_range,\n    prior_dist,\n    paralinks,\n    noise_type,\n    sigma_range,\n    sigma_dist,\n    nsamples,\n    nin,\n    nout,\n    hidden_layers,\n    dropoutp,\n    relu6,\n)\ntrainarg = TrainingArg(batchsize = 128, lossf=losses_rmse, device = cpu)\n\n# get mlp and training data\nmlp, logs, inputs, labels = training(trainarg, netarg)\n\n# visualize training log\np = logs_plt(logs, trainarg)","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"<img src=\"../assets/package_demo/Training_log_plot_smt.png\" width=500 /> ","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"We can then get the estimates on the synthetic data and use utility function to visualize the evaluation results:","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"# get probabilistic estimates for the training data for evaluation\nntest = 100    # the number of test times\nposteriors = test(mlp, inputs, ntest) # posterior samples\nest = mean(posteriors)      # mean\nest_std = std(posteriors)   # standard deviation \n\n# get evaluation plot for each parameters in the model \nevalplots_mean, evalplots_std, para_range = eval_plt(netarg, est, est_std, labels)\n\n# plotting evaluation \ntitles = [L\"f_{ia}\" L\"D_{\\parallel}\" L\"D_{\\perp}^{ec}\"]\nPlots.plot(\n    evalplots_mean[\"fracs1\"],\n    evalplots_mean[\"axon.dpara\"],\n    evalplots_mean[\"extra.dperp\"];\n    layout=(1, 3),\n    size=(900, 200),\n    legend=:none,\n    margin=5mm,\n    xguidefontsize=8,\n    yguidefontsize=10,\n    titles=titles,\n    xlabel=[L\"GT \" L\"GT\\ [{\\mu}m^2/ms]\" L\"GT\\ [{\\mu}m^2/ms]\"],\n    ylabel=L\"Estimates: Mean\",\n)\n\nsavefig(joinpath(figdir, \"Eval_smt_3p_\" * info * \"_mean.pdf\"))\n\nPlots.plot(\n    evalplots_std[\"fracs1\"],\n    evalplots_std[\"axon.dpara\"],\n    evalplots_std[\"extra.dperp\"];\n    layout=(1, 3),\n    size=(900, 200),\n    legend=:none,\n    margin=5mm,\n    xguidefontsize=8,\n    yguidefontsize=10,\n    titles=titles,\n    xlabel=[L\"GT \" L\"GT\\ [{\\mu}m^2/ms]\" L\"GT\\ [{\\mu}m^2/ms]\"],\n    ylabel=L\"Std/Prior\\ Range\",\n)\n\nsavefig(joinpath(figdir, \"Eval_smt_3p_\" * info * \"_std.pdf\"))","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"To apply the trained mlp to real data, we can use the nn_estimate function:","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"# apply trained mlp to real data\nsubjs = (\"905147\", \"971160\", \"983773\", \"984472\", \"992774\", \"994273\")\nmodelname = \"smt.3p.\" * info * \".\"  # savename\n\nfor subj in subjs\n\n    # read data and mask\n    datadir = joinpath(\"/Users/tgong/Work/Database/HCP\", subj)\n    dmri = mri_read(joinpath(datadir, \"diravg_norm.nii.gz\"))\n    mask = mri_read(joinpath(datadir, \"nodif_brain_mask.nii\"))\n\n    # apply mlp to the data and save estimated parameter maps as nifti\n    savedir = joinpath(datadir, \"SMT\")\n    mkpath(savedir)\n    nn_estimate(dmri, mask, mlp, netarg, ntest, savedir, modelname)\nend","category":"page"},{"location":"guide/4_smt/#Results","page":"SMT","title":"Results","text":"","category":"section"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"Evaluation on synthetic data. The Gaussian prior for D_∥, with a mean value representative of WM tissue, improved the precision and reduced the uncertainty for the diffusivity measures. The estimation accuracy of f_{ia} was not affected much by the prior distributions of diffusivities. ","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"<embed src=\"../assets/package_demo/Figure8_SMT_eval.pdf\" width=\"800px\" height=\"300px\" />","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"Effect of prior distribution on SMT model fitting with neural network estimator. Data were synthesized assuming the acquisition parameters of the HCP protocol and either uniform (A) or Gaussian (B) prior distribution for D_. Samples of D_^ec were generated by multiplying D_ by random, uniformly distributed numbers between [0, 1].  (a) 2D histograms of ground truth (GT) values vs. estimates (posterior mean); (b) 2D histogram of GT vs. the ratio of the standard deviation (Std) of the posterior over the prior range; (c) distributions of parameters in the training samples/ground truth parameters. ","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"Parameter map from one example subject. The high uncertainty of f_ia caused by CSF contamination is highlighted by the high standard deviations in the posteriors. The reduced uncertainty of D_ resulting from using a Gaussian prior is also evident from the uncertainty map. Distributions of parameter estimates in the WM from 6 subjects show high consistency. ","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"<embed src=\"../assets/package_demo/Figure9_SMT_map.pdf\" width=\"800px\" height=\"400px\" />","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"SMT model fitting on in vivo human data. The trained models with (A) uniform and (B) Gaussian priors were used for inference on 6 randomly selected datasets from the WashU/UMinn young adult HCP. (a) Mean and standard deviation maps for estimates of different microstructural parameters from one subject. The high uncertainty caused by CSF contamination in f_ia is highlighted by the white arrows in both (A) and (B). The reduced uncertainty of D_ when using a Gaussian prior is highlighted by the orange arrows. (b) Probability density of the estimates in WM shows high overlap across 6 subjects. ","category":"page"},{"location":"guide/4_smt/#References","page":"SMT","title":"References","text":"","category":"section"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"Kaden, E., Kelm, N.D., Carson, R.P., Does, M.D., Alexander, D.C., 2016. Multi-compartment microscopic diffusion imaging. Neuroimage 139, 346–359. https://doi.org/10.1016/J.NEUROIMAGE.2016.06.002","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"Glasser, M.F., Sotiropoulos, S.N., Wilson, J.A., Coalson, T.S., Fischl, B., Andersson, J.L., Xu, J., Jbabdi, S., Webster, M., Polimeni, J.R., Van Essen, D.C., Jenkinson, M., 2013. The minimal preprocessing pipelines for the Human Connectome Project. Neuroimage 80, 105–124. https://doi.org/10.1016/j.neuroimage.2013.04.127","category":"page"},{"location":"guide/4_smt/","page":"SMT","title":"SMT","text":"Van Essen, D.C., Ugurbil, K., Auerbach, E., Barch, D., Behrens, T.E.J., Bucholz, R., Chang, A., Chen, L., Corbetta, M., Curtiss, S.W., Della Penna, S., Feinberg, D., Glasser, M.F., Harel, N., Heath, A.C., Larson-Prior, L., Marcus, D., Michalareas, G., Moeller, S., Oostenveld, R., Petersen, S.E., Prior, F., Schlaggar, B.L., Smith, S.M., Snyder, A.Z., Xu, J., Yacoub, E., 2012. The Human Connectome Project: A data acquisition perspective. Neuroimage. https://doi.org/10.1016/j.neuroimage.2012.02.018","category":"page"},{"location":"#What-is-Microstructure.jl-for?","page":"Home","title":"What is Microstructure.jl for?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Microstructure.jl is a Julia toolbox aiming at fast and probabilistic microstructure imaging with diffusion and combined diffusion-relaxometry MRI. Microstructure imaging enables the estimation of biologically meaningful cellular parameters from MRI data. This is achieved by simplifying the tissue within a voxel into multiple compartments representing different cellular structures, e.g. axons and cell bodies etc. Each tissue compartment has unique features that affect the MR signals under a measurement protocol, thus allowing their estimation through solving an inverse problem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Since MRI measurements are typically noisy and exhibit varying sensitivities to tissue features, point estimation methods, which provide a single estimate of each tissue parameter, are often insufficient for understanding the meaningfulness of the estimated tissue parameters. To address this issue, many previous studies have investigated more extensive methods such as Markov Chain Monte Carlo (MCMC) sampling, to sample the posterior distributions of tissue parameters and thereby obtain the probability of the estimates. However, such methods have seen limited applications in neuroimaging studies due to the significantly longer computation time required for analyzing whole-brain datasets. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Microstructure.jl aims to reduce the computation time required for probabilistic microstructure imaging by leveraging Julia's high performance design. It does not directly address limitations in microstructure modelling itself but aims to serve as a flexible tool to better investigate modelling assumptions and model performance. General recommendations for model fitting will be shared after testing and optimization.  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you are interested, please try it out! The getting started page includes the minimal steps for beginning with your MRI dataset. Visit manual and upcoming tutorials for more feature demonstrations, recommendations and references!","category":"page"},{"location":"#Feature-Summary","page":"Home","title":"Feature Summary","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Combined diffusion-relaxometry compartment modelling\nFlexible in creating models and adjusting assumptions\nGeneric MCMC and neural network estimators\nFaster MCMC with Parallel computing\nCompatible with the probabilistic programming language Turing.jl","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Microstructure.jl, type ] in Julia to enter package mode and add the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\npkg> add Microstructure","category":"page"},{"location":"","page":"Home","title":"Home","text":"Microstructure.jl is under active development and is frequently updated. To ensure you have the latest version, use the following command in the package mode:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> up Microstructure","category":"page"},{"location":"#Relationship-to-Other-Packages","page":"Home","title":"Relationship to Other Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Microstructure.jl focuses on tissue microstructure estimation. If you are also interested in fiber orientation and tractography, please check out Fibers.jl. Microstructure.jl also uses I/O functions from Fibers.jl for reading and writing mri image files. ","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Development of this package is supported by the NIH National Institute of Neurologic Disorders and Stroke (grants UM1-NS132358, R01-NS119911, R01-NS127353).","category":"page"}]
}
