var documenterSearchIndex = {"docs":
[{"location":"manual/models/#Microstructure-Models","page":"Microstructure Models","title":"Microstructure Models","text":"","category":"section"},{"location":"manual/models/#dMRI-models","page":"Microstructure Models","title":"dMRI models","text":"","category":"section"},{"location":"manual/models/#WM-models","page":"Microstructure Models","title":"WM models","text":"","category":"section"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"ExCaliber","category":"page"},{"location":"manual/models/#Microstructure.ExCaliber","page":"Microstructure Models","title":"Microstructure.ExCaliber","text":"ExCaliber(axon, extra, csf, dot, fracs)\n\nExCaliber model for ex vivo tissue; dot signal considered The fraction vector represents fractions of the axon, CSF and dot with the fraction of extra being 1-sum(fracs)\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#GM-models","page":"Microstructure Models","title":"GM models","text":"","category":"section"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"SANDI","category":"page"},{"location":"manual/models/#Microstructure.SANDI","page":"Microstructure Models","title":"Microstructure.SANDI","text":"SANDI(soma, neurite, extra, fracs)\n\nSANDI models or MTE-SANDI models including three tissue compartments for in vivo imaging For SANDI model, ignore the field of t2 in all compartments and set them to 0\n\n\n\n\n\n","category":"type"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"SANDIdot","category":"page"},{"location":"manual/models/#Microstructure.SANDIdot","page":"Microstructure Models","title":"Microstructure.SANDIdot","text":"SANDIdot models or MTE-SANDIdot models including additionally a dot compartment for ex vivo imaging For SANDIdot model, ignore the field of t2 in all compartments and set them to 0 For MTE-SANDIdot model, consider the t2 values in all compartments The fraction vector represents fractions of the soma, neurite and dot with the fraction of extra being 1-sum(fracs)\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#Combined-diffusion-relaxometry-models","page":"Microstructure Models","title":"Combined diffusion-relaxometry models","text":"","category":"section"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"MTE_SMT","category":"page"},{"location":"manual/models/#Microstructure.MTE_SMT","page":"Microstructure Models","title":"Microstructure.MTE_SMT","text":"MTE_SMT(axon, extra, fracs, S0norm)\n\nTo test multi-TE spherical mean technique for low-b in vivo imaging\n\n\n\n\n\n","category":"type"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"MTE_SANDI","category":"page"},{"location":"manual/models/#Microstructure.MTE_SANDI","page":"Microstructure Models","title":"Microstructure.MTE_SANDI","text":"MTE_SANDI(soma, neurite, extra, fracs, S0norm)\n\nFor MTE-SANDI model, consider the t2 values in all compartments The fraction vector represents fractions of the soma and neurite with the fraction of extra being 1-sum(fracs) S0norm is the relaxation-weighting free signal from all compartments S(b=0,t=0) normalised by S(b=0,t=TEmin)\n\n\n\n\n\n","category":"type"},{"location":"manual/models/#Prediction-of-MRI-signals","page":"Microstructure Models","title":"Prediction of MRI signals","text":"","category":"section"},{"location":"manual/models/","page":"Microstructure Models","title":"Microstructure Models","text":"model_signals","category":"page"},{"location":"manual/models/#Microstructure.model_signals","page":"Microstructure Models","title":"Microstructure.model_signals","text":"model_signals(model,prot[,links])\n\nPredict model signals from BiophysicalModel model and imaging protocol 'prot'.     links is a optional argument that specify parameter links in the model\n\n\n\n\n\n","category":"function"},{"location":"tutorials/1_build_models/#How-to-build-a-microstructure-model","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"","category":"section"},{"location":"tutorials/1_build_models/#1.-diffusion-MRI-model","page":"How to build a microstructure model","title":"1. diffusion MRI model","text":"","category":"section"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Load the module","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"using Microstructure","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Specify the acquisition parameters and make a protocol. In real case, you can read a protocol from your acquisition text files","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"bval = [1000, 2500, 5000, 7500, 11100, 18100, 25000, 43000].*1.0e6\ntecho = 40.0.*ones(8,).*1e-3\ntdelta = 15.192.*ones(8,).*1e-3\ntsmalldel = 11.0.*ones(8,).*1e-3\nprot = Protocol(bval,techo,tdelta,tsmalldel)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Specify a model containing all the tissue parameters. Here, the example ExCaliber is a model for estimating axon diameter in ex vivo tissue using the spherical mean technique","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"estimates = ExCaliber()","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can check how the tissue is modelled by printing the model. It will give you all the tissue compartments","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"print_model(estimates)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can check the values in the tissue model by using @show macro. This will show the default values if you didn't specify parameters when declare a model","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"@show estimates","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can specify tissue parameters when declearing a model; fields/subfiedls that are not specified will take the default values","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"estimates = ExCaliber( axon = Cylinder(da = 4e-6, dpara = 0.7e-9))","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can change the fields/subfields of a decleared model struct by using update! funciton.","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"a. update a field/subfields","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"undate!(estimates, \"axon.da\" => 5e-6)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"It's common that we need to link certain tissue parameters in some models as they may not be distinguishable under the experimental condition.","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"b. update a field/subfield using parameter links.","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"update!(estimates,\"axon.d0\" => \"axon.dpara\")","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"c. update multiple parameters","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"update!(estimates,(\"axon.da\" => 5e-6, \"axon.dpara\" => 0.5e-9, \"axon.d0\" => \"axon.dpara\", \"extra.dpara\" => \"axon.dpara\"))","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Now we can use the model and protocol to generate some mri signals","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"signals = model_signals(estimates,prot)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"We can add some noise to the signals to make them look like real measurements","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"using Random, Distributions\n\nsigma = 0.01 # SNR=100 at S(b=0,t=TEmin) (b=0 of minimal TE)\nnoise = Normal(0,sigma)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Add some Gaussian noise","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"meas = signals .+ rand(noise,size(signals))","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"or Rician noise","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"meas_rician = sqrt.((signals .+ rand(noise,size(signals))).^2.0 .+ rand(noise,size(signals)).^2.0)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"You can check the predict signals and simulated measurements by ploting them","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"using Plots\nplot(prot.bval, signals, label=\"predicted signals\", lc=:black, lw=2)\nscatter!(prot.bval, meas, label=\"noisy measurements\", mc=:red, ms=2, ma=0.5)\nxlabel!(\"b-values [s/m^2]\")","category":"page"},{"location":"tutorials/1_build_models/#2.-Combined-Diffusion-relaxometry-model","page":"How to build a microstructure model","title":"2. Combined Diffusion-relaxometry model","text":"","category":"section"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Now let's look at a diffusion-relaxometry model MTE-SANDI. Similarly, declear a model object and check the values","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"model = MTE_SANDI()\nprint_model(model)\n@show model","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"MTE_SANDI requires data acquired at multiple echo times to solve the inverse problem and we will define a different protocol for it.","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Make a multi-TE protocol","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"nTE = 4\nnb = 9\nbval = repeat([0, 1000, 2500, 5000, 7500, 11100, 18100, 25000, 43000].*1.0e6, outer=nTE)\ntecho = repeat([32, 45, 60, 78].*1e-3, inner=9)\ntdelta = 15.192.*ones(nTE*nb,).*1e-3\ntsmalldel = 11.0.*ones(nTE*nb,).*1e-3\nprot = Protocol(bval,techo,tdelta,tsmalldel)","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"Let's see how multi-TE signals look like","category":"page"},{"location":"tutorials/1_build_models/","page":"How to build a microstructure model","title":"How to build a microstructure model","text":"signals = model_signals(model, prot)\nmeas = signals .+ rand(noise,size(signals))\n\nplot(signals, label=\"predicted signals\", lc=:black, lw=2)\nscatter!(meas, label=\"noisy measurements\", mc=:red, ms=2, ma=0.5)","category":"page"},{"location":"tutorials/5_model_selection/#Which-model-to-use","page":"Which model to use","title":"Which model to use","text":"","category":"section"},{"location":"tutorials/5_model_selection/","page":"Which model to use","title":"Which model to use","text":"Constructing...","category":"page"},{"location":"manual/dMRI/#I/O-functions","page":"I/O functions","title":"I/O functions","text":"","category":"section"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"The page introduces functions for reading dMRI data and protocols for microstructure imaging.","category":"page"},{"location":"manual/dMRI/#Read-dMRI-data-and-get-spherical-mean-signals-and-imaging-protocols","page":"I/O functions","title":"Read dMRI data and get spherical mean signals & imaging protocols","text":"","category":"section"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"spherical_mean","category":"page"},{"location":"manual/dMRI/#Microstructure.spherical_mean","page":"I/O functions","title":"Microstructure.spherical_mean","text":"spherical_mean(\n    image_file::String, \n    normalize::Bool=true, \n    save::Bool=true, \n    acq_files::String...\n)\n\nPerform direction average on input DWI images 'infileimage' and return MRI object with smt signal and associated imaging protocol. 'infileimage' is the full path of the DWI image file; 'normalize' indicates if normalisation to the b0 is applied; 'save' indicates  if save the smt signals to nifti files on the save path as the input data (the protocol is also saved as a text file). Finall, variable number of 'acqfiles' are text files that tell acquistion parameters of each DWI in the 'infileimage'.  Accepted file extensions are .bvals/.bvecs/.techo/.tdelta/.tsmalldel.\n\nBesides .bvals/.bvecs for conventional modelling, .tdelta/.tsmalldel files are needed for any models that estimate size, e.g. axon diameter, soma radius. .techo is needed if your data is collected with multiple echo-time and you want to do combined-diffusion relaxometry modelling.  The format of a .tdelta/.tsmalldel/.techo file is similar to a .bvals file (a vector with the length equal to the number of DWI volumes).  Unit in the .tdelta/.tsmalldel/.techo file is ms. \n\n\n\n\n\n","category":"function"},{"location":"manual/dMRI/#The-dMRI-and-Protocol-type","page":"I/O functions","title":"The dMRI and Protocol type","text":"","category":"section"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"dMRI","category":"page"},{"location":"manual/dMRI/#Microstructure.dMRI","page":"I/O functions","title":"Microstructure.dMRI","text":"dMRI(nifti::MRI, \ntdelta::Vector{Float64}, \ndsmalldel::Vector{Float64}, \ntecho::Vector{Float64}, \nsmt::Bool)\n\nReturn a dMRI Type object with MRI object 'nifti', and additional volume-wise  experimental settings 'tdelta', 'tsmalldel', 'techo', and 'smt' for identifing smt signals. \n\n\n\n\n\n","category":"type"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"Protocol","category":"page"},{"location":"manual/dMRI/#Microstructure.Protocol","page":"I/O functions","title":"Microstructure.Protocol","text":"Protocol(\nbval::Vector{Float64}\ntecho::Vector{Float64}\ntdelta::Vector{Float64}\ntsmalldel::Vector{Float64}\ngvec::Vector{Float64}\n)\n\nReturn a Protocol Type object to hold parameters in acquisition protocol relavent for modelling. Unit convention: most text files use s/mm^2 for b-values and ms for time while they are converted to SI unit in the Protocol. b-values (s/m^2); time (s); size (m); G (T/m) \n\n\n\n\n\n","category":"type"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"Write image and save protocol","category":"page"},{"location":"manual/dMRI/","page":"I/O functions","title":"I/O functions","text":"dmri_write","category":"page"},{"location":"manual/dMRI/#Microstructure.dmri_write","page":"I/O functions","title":"Microstructure.dmri_write","text":"dmri_write(dmri::dMRI, datapath::String, filename::String)\n\nWrite the nifti volume in a dMRI object to nifti file and associated protocol as b-table text files in the given 'datapath' and 'filename'\n\n\n\n\n\n","category":"function"},{"location":"tutorials/2_quality_of_fit/#How-to-check-quality-of-fitting-and-mcmc-samples","page":"How to check quality of fitting and mcmc samples","title":"How to check quality of fitting and mcmc samples","text":"","category":"section"},{"location":"tutorials/2_quality_of_fit/","page":"How to check quality of fitting and mcmc samples","title":"How to check quality of fitting and mcmc samples","text":"Constructing...","category":"page"},{"location":"guide/#Developer-guide","page":"Developer guide","title":"Developer guide","text":"","category":"section"},{"location":"manual/estimators/#Estimators","page":"Estimators","title":"Estimators","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"This page introduces two type of estimators implemented in Microstructure.jl for estimating parameters and uncertainties, including the Markov Chain Monte Carlo (MCMC) sampling method and Monte Carlo dropout using neural networks.","category":"page"},{"location":"manual/estimators/#MCMC","page":"Estimators","title":"MCMC","text":"","category":"section"},{"location":"manual/estimators/#1.-Define-a-sampler-for-your-model","page":"Estimators","title":"1. Define a sampler for your model","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"Sampler","category":"page"},{"location":"manual/estimators/#Microstructure.Sampler","page":"Estimators","title":"Microstructure.Sampler","text":"Sampler(\n    params::Tuple{Vararg{String}},\n    prior_range::Tuple{Vararg{Tuple{Float64, Float64}}}, \n    proposal::Tuple{Vararg{<:Any}},\n    paralinks::Tuple{Vararg{Pair{String}}}, \n    nsamples::Int64 \n    burnin::Int64\n    thinning::Int64 \n)\n\nReturn a Sampler Type object for a biophysical model.\n\nExamples\n\njulia>Sampler(\n    params = (\"axon.da\",\"axon.dpara\",\"extra.dperp_frac\",\"fracs\"),\n    prior_range = ((1.0e-7,1.0e-5),(0.01e-9,0.9e-9),(0.0, 1.0),(0.0,1.0)),\n    proposal = (Normal(0,0.25e-6), Normal(0,0.025e-9), Normal(0,0.05), MvNormal([0.0025 0 0;0 0.0001 0; 0 0 0.0001])),\n    paralinks = (\"axon.d0\" => \"axon.dpara\", \"extra.dpara\" => \"axon.dpara\")\n)\nSampler((\"axon.da\", \"axon.dpara\", \"extra.dperp_frac\", \"fracs\"), ((1.0e-7, 1.0e-5), (1.0e-11, 9.0e-10), (0.0, 1.0), (0.0, 1.0)), (Normal{Float64}(μ=0.0, σ=2.5e-7), Normal{Float64}(μ=0.0, σ=2.5e-11), Normal{Float64}(μ=0.0, σ=0.05), ZeroMeanFullNormal(\ndim: 3\nμ: Zeros(3)\nΣ: [0.0025 0.0 0.0; 0.0 0.0001 0.0; 0.0 0.0 0.0001]\n)\n), (\"axon.d0\" => \"axon.dpara\", \"extra.dpara\" => \"axon.dpara\"), 70000, 20000, 100)\n\n\n\n\n\n","category":"type"},{"location":"manual/estimators/#2.-Define-a-noise-model","page":"Estimators","title":"2. Define a noise model","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"Noisemodel","category":"page"},{"location":"manual/estimators/#Microstructure.Noisemodel","page":"Estimators","title":"Microstructure.Noisemodel","text":"Noisemodel(logpdf::Function, \nsigma_start::Float64, \nsigma_range::Tuple{Float64,Float64}, \nproposal::Distribution)\n\nReturn a Noisemodel object with 'logpdf' Function to calculate log likelihood of measurements (set this between logpgauss and logprician),  'sigmastart' as the starting value of noise level, 'sigmarange' as prior range and 'proposal' distribution for MCMC sampling.\n\nExamples\n\njulia> Noisemodel()\nNoisemodel(Microstructure.logp_gauss, 0.01, (0.005, 0.1), Distributions.Normal{Float64}(μ=0.0, σ=0.005))\n\njulia> Noisemodel(logpdf = logp_rician, sigma_start = 0.02, proposal = Normal(0,0.001))\nNoisemodel(Microstructure.logp_rician, 0.02, (0.005, 0.1), Normal{Float64}(μ=0.0, σ=0.001))\n\n\n\n\n\n","category":"type"},{"location":"manual/estimators/#3.-Run-MCMC-on-your-model-and-data","page":"Estimators","title":"3. Run MCMC on your model and data","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"mcmc!","category":"page"},{"location":"manual/estimators/#Microstructure.mcmc!","page":"Estimators","title":"Microstructure.mcmc!","text":"Method 1 generates pertubations within function, creates and returns a dict chain, and modify final model estimates in place. This method is useful in checking a few voxels, e.g. for quality of fitting, chain dignostics and optimizing sampler for models. \n\nmcmc!(\n    estimates::BiophysicalModel,\n    meas::Vector{Float64},\n    protocol::Protocol,\n    sampler::Sampler,\n    noise::Noisemodel = Noisemodel(),\n    rng::Int64 = 1\n)\n\njulia> chain = mcmc!(estimates, measurements, protocol, sampler, noise_model, rng)\n\nMethod 2 takes chain and pertubations as input, mutating chain in place which can be used to calculate finial estimates and uncertainties.  This method is used for processing larger dataset, e.g. for whole-barin/slices.  This method is used together with multi-threads processing that pre-allocate spaces for caching chains, avoiding creating them for each voxel.  This method also reuses pertubations for faster speed, as we usually use a very large number of pertubations (e.g. 70000) to densely sample the proposal distributions. \n\nmcmc!(\n    chain::Vector{Any},\n    estimates::BiophysicalModel,\n    meas::Vector{Float64},\n    protocol::Protocol,\n    sampler::Sampler,\n    pertubations::Vector{Vector{Any}},\n    noise::Noisemodel = Noisemodel()\n)\n\njulia> mcmc!(chain, estimates, meas, protocol, sampler, pertubations, noise_model))\n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/#Neural-Networks","page":"Estimators","title":"Neural Networks","text":"","category":"section"},{"location":"manual/estimators/#1.-Specify-a-network-model-for-your-task","page":"Estimators","title":"1. Specify a network model for your task","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"NetworkArg","category":"page"},{"location":"manual/estimators/#Microstructure.NetworkArg","page":"Estimators","title":"Microstructure.NetworkArg","text":"NetworkArg(\n    model::BiophysicalModel\n    protocol::Protocol\n    params::Tuple{Vararg{String}}\n    paralinks::Tuple{Vararg{Pair{String,<:String}}} = ()\n    tissuetype::String = \"ex_vivo\" # \"in_vivo\"\n    sigma::Float64\n    noise_type::String = \"Gaussian\" # \"Rician\"\n    hidden_layers::Tuple{Vararg{Int64}}\n    nsamples::Int64\n    nin::Int64\n    nout::Int64\n    dropoutp::Float64 = 0.2\n)\n\nReturn a NetworkArg object with necessary parameters to constructe a neural network model  and generate training samples for specifc biophysical model.  Network architecture and training samples can be automaticlly determined from the modelling task by using function \n\nNetworkArg(model, protocol, params, paralinks, tissuetype, sigma, noise_type)\n\n\n\n\n\n","category":"type"},{"location":"manual/estimators/#2.-Specify-training-parameters","page":"Estimators","title":"2. Specify training parameters","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"TrainingArg","category":"page"},{"location":"manual/estimators/#Microstructure.TrainingArg","page":"Estimators","title":"Microstructure.TrainingArg","text":"TrainingArg(\n    batchsize::Int64 \n    lossf::Function\n    lr::Float64\n    epoch::Int64\n    tv_split::Float64\n    patience::Tuple{Int64,Int64} \n)\n\nReturn TrainingArg Type object with fields related to how network will be trained. batch size; loss function; learning rate; number of epoches; validation/training data split; patience for train loss plateau, patience for validation loss to increase.\n\n\n\n\n\n","category":"type"},{"location":"manual/estimators/#3.-Prepare-network-and-data-for-training","page":"Estimators","title":"3. Prepare network and data for training","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"prepare_training","category":"page"},{"location":"manual/estimators/#Microstructure.prepare_training","page":"Estimators","title":"Microstructure.prepare_training","text":"prepare_trainning(arg::NetworkArg)\n\nReturn (mlp, inputs, labels, gt), where 'mlp' is the network model,  'inputs' and 'labels' are arrays of signals and scaled tissue parameters, and 'gt' is a dict containing the ground truth tissue parameters without applying scaling.\n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/#4.-Training-on-generated-training-samples","page":"Estimators","title":"4. Training on generated training samples","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"train_loop!","category":"page"},{"location":"manual/estimators/#Microstructure.train_loop!","page":"Estimators","title":"Microstructure.train_loop!","text":"train_loop!(\n    mlp::Chain, arg::TrainingArg, inputs::Array{Float64,2}, labels::Array{Float64,2}\n)\n\nTrain and update the 'mlp' and return a Dict of training logs with \"trainloss\", \"traindataloss\" and \"valdata_loss\" for each epoch.\n\n\n\n\n\n","category":"function"},{"location":"manual/estimators/#5.-test-on-you-data","page":"Estimators","title":"5. test on you data","text":"","category":"section"},{"location":"manual/estimators/","page":"Estimators","title":"Estimators","text":"test","category":"page"},{"location":"manual/estimators/#Microstructure.test","page":"Estimators","title":"Microstructure.test","text":"test(mlp::Chain, data::Array{Float64,2}, ntest)\n\nReturn mean and standard deviation of estimations by applying a trained mlp to test data for 'ntest' times with dropout layer on.\n\n\n\n\n\n","category":"function"},{"location":"manual/multithreads/#Multi-threads","page":"Multi threads","title":"Multi threads","text":"","category":"section"},{"location":"manual/multithreads/#Start-julia-in-terminal-with-multi-threads","page":"Multi threads","title":"Start julia in terminal with multi-threads","text":"","category":"section"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"~ % julia --threads auto","category":"page"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"You can also set enviornment variable by adding export JULIA_NUM_THREADS=auto in your bash profile, which will use multi-threads automatically when you start julia.","category":"page"},{"location":"manual/multithreads/#Multi-threads-for-MCMC-estimation","page":"Multi threads","title":"Multi-threads for MCMC estimation","text":"","category":"section"},{"location":"manual/multithreads/","page":"Multi threads","title":"Multi threads","text":"threading","category":"page"},{"location":"manual/multithreads/#Microstructure.threading","page":"Multi threads","title":"Microstructure.threading","text":"threading(\n    model_start::BiophysicalModel,\n    sampler::Sampler,\n    dmri::MRI,\n    mask::MRI,\n    protocol::Protocol,\n    noise_model::Noisemodel,\n    savedir::String,\n)\n\nThis method runs multi-threads MCMC estimation on dMRI data using a specified biophysical model,  and save estimated parameters as nifti files\n\nthreading(\n    model_start::BiophysicalModel,\n    sampler::Sampler,\n    measurements::Array{Float64,2},\n    protocol::Protocol,\n    noise_model::Noisemodel,\n)\n\nThis method returns mean and standard deviation of estimations from measurements array of size [Nmeas, Nvoxels]\n\n\n\n\n\n","category":"function"},{"location":"tutorials/3_data_generation/#How-to-generate-training-datasets","page":"How to generate training datasets","title":"How to generate training datasets","text":"","category":"section"},{"location":"tutorials/3_data_generation/","page":"How to generate training datasets","title":"How to generate training datasets","text":"Constructing...","category":"page"},{"location":"getting_started/#What-is-microstructure-imaging?","page":"Getting started","title":"What is microstructure imaging?","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Microstructure imaging allows us to estimate biologically meaningful cellular parameters from MRI data. This is achieved through simplifying the tissue in a voxel as multiple compartments representing different cellular structures, e.g. axons and cell bodies etc. Each tissue compartment has unique features in determine the MR signals under a measurement protocol, and therefore can be estimated by solving an inverse problem.","category":"page"},{"location":"getting_started/#Minimal-steps","page":"Getting started","title":"Minimal steps","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Here includes the minimal steps for you to get started with your MRI dataset. Visit tutorial and manual pages for more feature demonstrations. ","category":"page"},{"location":"getting_started/#Start-julia-in-terminal-with-multi-threads","page":"Getting started","title":"Start julia in terminal with multi-threads","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"~ % julia --threads auto","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"You can also set enviornment variable by adding export JULIA_NUM_THREADS=auto in your bash profile, which will use multi-threads automatically when you start julia.","category":"page"},{"location":"getting_started/#Load-the-package-in-Julia","page":"Getting started","title":"Load the package in Julia","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"In you julia script or REPL:","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> using Microstructure","category":"page"},{"location":"getting_started/#Read-dMRI-data-and-perform-spherical-mean","page":"Getting started","title":"Read dMRI data and perform spherical mean","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Provide full path to dMRI images and names of acquisition files with following extensions:     dwiname.bvals, dwiname.bvecs, dwiname.techo, dwiname.tdelta, dwiname.tsmalldel      provide all or a subset of the files depending on the data and model you use. ","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> (dMRI, protocol) = spherical_mean(\n                            datadir * \"/dwiname.nii.gz\", \n                            normalize=true, \n                            save=true, \n                            datadir * \"dwiname.bvals\", \n                            datadir * \"dwiname.bvecs\", \n                            datadir * \"dwiname.techo\", \n                            datadir * \"dwiname.tdelta\", \n                            datadir * \"dwiname.tsmalldel\")","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"You might also need to read a tissue mask to define the region you want to process:","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> using FreeSurfer\njulia> mask = mri_read(datadir * \"/mask.nii.gz\")","category":"page"},{"location":"getting_started/#Specify-the-model-we-want-to-use-and-get-a-MCMC-sampler-for-it","page":"Getting started","title":"Specify the model we want to use and get a MCMC sampler for it","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"Here, we use a multi-echo spherical mean model which is curently under testing as an example:","category":"page"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> model_start = MTE_SMT(axon = Stick(dpara = 1.7e-9, t2 = 90e-3), extra = Zeppelin(dpara = 1.7e-9, t2 = 60e-3))\njulia> sampler_smt = Sampler(model_start)","category":"page"},{"location":"getting_started/#Estimation","page":"Getting started","title":"Estimation","text":"","category":"section"},{"location":"getting_started/","page":"Getting started","title":"Getting started","text":"julia> savename = datadir * \"/mte_smt.\"\njulia> threading(model_start, sampler_smt, dMRI, mask, protocol, Noisemodel(), savename)","category":"page"},{"location":"manual/compartments/#Tissue-Compartments","page":"Tissue Compartments","title":"Tissue Compartments","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"This page introcudes Compartment types with fields of relevant tissue parameters and forward functions  inferencing signals from the compartment model and a imaging protocol. Featuring spherical mean based models with compartmental relaxation-weighting.","category":"page"},{"location":"manual/compartments/#Overview","page":"Tissue Compartments","title":"Overview","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"Compartment","category":"page"},{"location":"manual/compartments/#Microstructure.Compartment","page":"Tissue Compartments","title":"Microstructure.Compartment","text":"Compartment Type is an abstract type that includes the Cylinder, Stick, Zeppelin, Sphere and Iso type.  A Compartment Type object contains relevant tissue parameters that affect the MRI signals. Each type of compartment contain a 't2' field for combined-diffusion-relaxometry imaging.  When your data supports only T2-weighted compartment modelling,  i.e. acquired with single-TE, set the 't2' field to zero to for conventional dMRI modelling. \n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#axonal-and-dendritic-compartments","page":"Tissue Compartments","title":"axonal and dendritic compartments","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"Cylinder","category":"page"},{"location":"manual/compartments/#Microstructure.Cylinder","page":"Tissue Compartments","title":"Microstructure.Cylinder","text":"Cylinder(da::Float64, dpara::Float64, d0::Float64, t2::Float64)\n\nReturn a Cylinder Type object with the cylinder diameter 'da', parallel diffusivity 'dpara',  the intrinsic diffusivity 'd0' and the T2 relaxation time 't2'. \n\nExamples\n\njulia> Cylinder(da = 3.0e-6, dpara = 1.8e-9, d0 = 1.7e-9, t2 = 90e-3)\nCylinder(3.0e-6, 1.8e-9, 1.7e-9, 0.09)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"Stick","category":"page"},{"location":"manual/compartments/#Microstructure.Stick","page":"Tissue Compartments","title":"Microstructure.Stick","text":"Stick(dpara::Float64, t2::Float64)\n\nReturn a Stick Type object with parallel diffusivity 'dpara' and T2 relaxation time 't2'.  The perpendicular diffusivity of a Stick model is zero. \n\nExamples\n\njulia> Stick(dpara = 1.7e-6, t2 = 60e-3)\nStick(1.7e-6, 0.06)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#extra-cellular-compartment","page":"Tissue Compartments","title":"extra-cellular compartment","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"Zeppelin","category":"page"},{"location":"manual/compartments/#Microstructure.Zeppelin","page":"Tissue Compartments","title":"Microstructure.Zeppelin","text":"Zeppelin(dpara::Float64, dperp_frac::Float64, t2::Float64)\n\nReturn a Zeppelin Type object with parallel diffusivity 'dpara',  perpendicular diffusivity represented as a fraction of the parallel diffusivity 'dperp_frac', and the T2 relaxation time 't2'.\n\nExamples\n\njulia> Zeppelin(dpara = 1.7e-6, dperp_frac = 0.5, t2 = 0.0)\nZeppelin(1.7e-6, 0.5, 0.0)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#cell-body-compartment","page":"Tissue Compartments","title":"cell body compartment","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"Sphere","category":"page"},{"location":"manual/compartments/#Microstructure.Sphere","page":"Tissue Compartments","title":"Microstructure.Sphere","text":"Sphere(diff::Float64, size::Float64, t2::Float64)\n\nReturn a Sphere Type object with diffusivity within sphere 'diff', spherical radius 'size', and T2 relaxation time 't2'.\n\nExamples\n\njulia> Sphere(diff = 3.0e-9, size = 8.0e-6, t2 = 45e-3)\nSphere(3.0e-9, 8.0e-6, 0.045)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#CSF-and-dot-compartment","page":"Tissue Compartments","title":"CSF and dot compartment","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"Iso","category":"page"},{"location":"manual/compartments/#Microstructure.Iso","page":"Tissue Compartments","title":"Microstructure.Iso","text":"Iso(diff::Float64, t2=Float64)\n\nReturn an isotropic tensor with diffusivity 'diff' and T2 relaxation time 't2'.  This compartment can be used to represent CSF (diff = free water) or dot compartment (diff = 0).  The latter is for immobile water typically seen in ex vivo tissue.\n\nExamples\n\njulia> Iso(diff = 3.0e-9,t2 = 2000.0e-3)\nIso(3.0e-9, 2.0)\n\njulia> Iso(diff = 0.0)\nIso(0.0, 0.0)\n\n\n\n\n\n","category":"type"},{"location":"manual/compartments/#Compartment-signals","page":"Tissue Compartments","title":"Compartment signals","text":"","category":"section"},{"location":"manual/compartments/","page":"Tissue Compartments","title":"Tissue Compartments","text":"compartment_signals","category":"page"},{"location":"manual/compartments/#Microstructure.compartment_signals","page":"Tissue Compartments","title":"Microstructure.compartment_signals","text":"compartment_signals(model::Compartment,protocol::Protocol)\n\nReturn compartment signals given a compartment object 'model' and a imaging 'protocol'.  'model' can be the Cylinder/Zeppelin/Stick/Sphere/Iso Type. When t2 in compartment 'model' is set as default (0),  relaxation-weightings are not considered.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/4_noise_propagation/#How-to-evaluate-accuracy-and-precision","page":"How to evaluate accuracy and precision","title":"How to evaluate accuracy and precision","text":"","category":"section"},{"location":"tutorials/4_noise_propagation/","page":"How to evaluate accuracy and precision","title":"How to evaluate accuracy and precision","text":"Constructing...","category":"page"},{"location":"#Microstructure.jl","page":"Home","title":"Microstructure.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Microstructure.jl is a Julia toolbox aiming at fast and probabilistic microstructure imaging. It supports flexible and extendable compartment modelling with diffusion MRI and combined diffusion-relaxometry MRI. ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Microstructure.jl, type ] in Julia to enter package mode and add the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n(@v1.8) pkg> add Microstructrue","category":"page"},{"location":"","page":"Home","title":"Home","text":"Microstructure.jl is under active development and is frequently updated. To ensure you have the latest version, use the following command in the package mode:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.8) pkg> up Microstructrue","category":"page"},{"location":"#Feature-Summary","page":"Home","title":"Feature Summary","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Combined diffusion-relaxometry compartment modelling\nFlexible in creating models and adjusting assumptions\nGeneric MCMC and neural network estimators\nParallel computing ","category":"page"},{"location":"#Relationship-to-Other-Packages","page":"Home","title":"Relationship to Other Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Microstructure.jl focuses on tissue microstructure estimation. If you are also interested in fiber orientation and tractography, please check out FreeSurfer.jl. Microstructure.jl also uses I/O functions from FreeSurfer.jl for reading and writing mri image files. ","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"}]
}
